<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PhpNetMemcached</name>
    </assembly>
    <members>
        <member name="T:PHP.Library.Memcached.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:PHP.Library.Memcached.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:PHP.Library.Memcached.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:Enyim.Caching.Memcached.PooledSocket">
            <summary>
            Pooled socket.
            </summary>
        </member>
        <member name="M:Enyim.Caching.Memcached.PooledSocket.Reset">
            <summary>
            Reset socket. (and read available data.)
            </summary>
        </member>
        <member name="F:Enyim.Caching.Memcached.PooledSocket.InstanceId">
            <summary>
            The ID of this instance. Used by the <see cref="T:MemcachedServer"/> to identify the instance in its inner lists.
            </summary>
        </member>
        <member name="M:Enyim.Caching.Memcached.PooledSocket.Destroy">
            <summary>
            Releases all resources used by this instance and shuts down the inner <see cref="T:Socket"/>. This instance will not be usable anymore.
            </summary>
            <remarks>Use the IDisposable.Dispose method if you want to release this instance back into the pool.</remarks>
        </member>
        <member name="M:Enyim.Caching.Memcached.PooledSocket.Finalize">
            <summary>
            Finalize the socket. (shutdown, dispose)
            </summary>
        </member>
        <member name="M:Enyim.Caching.Memcached.PooledSocket.Dispose(System.Boolean)">
            <summary>
            Shutdown the socket and stream.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Enyim.Caching.Memcached.PooledSocket.ReadByte">
            <summary>
            Reads the next byte from the server's response.
            </summary>
            <remarks>This method blocks and will not return until the value is read.</remarks>
        </member>
        <member name="M:Enyim.Caching.Memcached.PooledSocket.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from the server into the specified buffer.
            </summary>
            <param name="buffer">An array of <see cref="T:System.Byte"/> that is the storage location for the received data.</param>
            <param name="offset">The location in buffer to store the received data.</param>
            <param name="count">The number of bytes to read.</param>
            <remarks>This method blocks and will not return until the specified amount of bytes are read.</remarks>
        </member>
        <member name="M:Enyim.Caching.Memcached.PooledSocket.Write(System.ArraySegment{System.Byte})">
            <summary>
            Write to socket.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Enyim.Caching.Memcached.PooledSocket.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write to socket.
            </summary>
            <param name="data"></param>
            <param name="offset"></param>
            <param name="length"></param>
        </member>
        <member name="M:Enyim.Caching.Memcached.PooledSocket.Write(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
            <summary>
            Write to socket.
            </summary>
            <param name="buffers"></param>
        </member>
        <member name="P:Enyim.Caching.Memcached.PooledSocket.OwnerNode">
            <summary>
            Owner node.
            </summary>
        </member>
        <member name="P:Enyim.Caching.Memcached.PooledSocket.Available">
            <summary>
            Available bytes in socket.
            </summary>
        </member>
        <member name="P:Enyim.Caching.Memcached.PooledSocket.IsAlive">
            <summary>
            Determine if socket is alive.
            </summary>
        </member>
        <member name="T:Enyim.Caching.Memcached.Operations.Text.TextProtocol">
            <summary>
            Memcached client.
            </summary>
        </member>
        <member name="F:Enyim.Caching.Memcached.Operations.Text.TextProtocol.MaxKeyLength">
            <summary>
            Maximum key length in Text protocol.
            </summary>
        </member>
        <member name="F:Enyim.Caching.Memcached.Operations.Text.TextProtocol.pool">
            <summary>
            Used server pool.
            </summary>
        </member>
        <member name="M:Enyim.Caching.Memcached.Operations.Text.TextProtocol.Dispose">
            <summary>
            Releases all resources allocated by this instance
            </summary>
            <remarks>Technically it's not really neccesary to call this, since the client does not create "really" disposable objects, so it's safe to assume that when 
            the AppPool shuts down all resources will be released correctly and no handles or such will remain in the memory.</remarks>
        </member>
        <member name="T:Enyim.Caching.Memcached.Operations.Operation">
            <summary>
            Base class for implementing operations.
            </summary>
        </member>
        <member name="M:Enyim.Caching.Memcached.Operations.Operation.SplitKeys(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Maps each key in the list to a MemcachedNode.
            If the serverKey is not empty, it's used instead of keys to locate the server node.
            </summary>
            <param name="keys"></param>
            <param name="serverKey">Use this key instead of keys to locate the proper server node.</param>
            <returns></returns>
        </member>
        <member name="T:Enyim.Caching.Memcached.KeyTransformerBase">
            <summary>
            Key transformer.
            </summary>
        </member>
        <member name="T:Enyim.Caching.Memcached.IMemcachedKeyTransformer">
            <summary>
            Converts Memcached item keys into a custom format.
            </summary>
        </member>
        <member name="M:Enyim.Caching.Memcached.IMemcachedKeyTransformer.Transform(System.String)">
            <summary>
            Performs the transformation.
            </summary>
            <param name="key">The key to be transformed.</param>
            <returns>the transformed key.</returns>
        </member>
        <member name="M:Enyim.Caching.Memcached.KeyTransformerBase.Transform(System.String)">
            <summary>
            Transform the key.
            </summary>
            <param name="key">The key to transform.</param>
            <returns></returns>
        </member>
        <member name="T:Enyim.Caching.Memcached.Distribution.ModulaNodeLocator">
            <summary>
            This is a ketama-like consistent hashing based node locator. Used when no other <see cref="T:IMemcachedNodeLocator"/> is specified for the pool.
            </summary>
        </member>
        <member name="T:Enyim.Caching.Memcached.Distribution.IMemcachedNodeLocator">
            <summary>
            Defines a locator class which maps item keys to memcached servers.
            </summary>
        </member>
        <member name="M:Enyim.Caching.Memcached.Distribution.IMemcachedNodeLocator.Initialize(System.Collections.Generic.ICollection{Enyim.Caching.Memcached.IMemcachedNode},System.Security.Cryptography.HashAlgorithm)">
            <summary>
            Initializes the locator.
            </summary>
            <param name="nodes">The memcached nodes defined in the configuration.</param>
            <param name="hash">Hashing algorithm used by the locator.</param>
        </member>
        <member name="M:Enyim.Caching.Memcached.Distribution.IMemcachedNodeLocator.Locate(System.String)">
            <summary>
            Returns the memcached node the specified key belongs to.
            </summary>
            <param name="key">The key of the item to be located.</param>
            <returns>The <see cref="T:MemcachedNode"/> the specifed item belongs to</returns>
        </member>
        <member name="T:Enyim.Reflection.IFastObjectFacory">
            <summary>
            Object factory interface.
            </summary>
        </member>
        <member name="M:Enyim.Reflection.IFastObjectFacory.CreateInstance">
            <summary>
            Create object instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Enyim.Reflection.IFastMultiArgObjectFacory">
            <summary>
            Object factory interface.
            </summary>
        </member>
        <member name="M:Enyim.Reflection.IFastMultiArgObjectFacory.CreateInstance(System.Object[])">
            <summary>
            Create object instance.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:Enyim.Caching.Configuration.ISocketPoolConfiguration">
            <summary>
            Defines an interface for configuring the socket pool for the <see cref="T:MemcachedClient"/>.
            </summary>
        </member>
        <member name="P:Enyim.Caching.Configuration.ISocketPoolConfiguration.MinPoolSize">
            <summary>
            Gets or sets a value indicating the minimum amount of sockets per server in the socket pool.
            </summary>
            <returns>The minimum amount of sockets per server in the socket pool.</returns>
        </member>
        <member name="P:Enyim.Caching.Configuration.ISocketPoolConfiguration.MaxPoolSize">
            <summary>
            Gets or sets a value indicating the maximum amount of sockets per server in the socket pool.
            </summary>
            <returns>The maximum amount of sockets per server in the socket pool.</returns>
        </member>
        <member name="P:Enyim.Caching.Configuration.ISocketPoolConfiguration.ConnectionTimeout">
            <summary>
            Gets or sets a value that specifies the amount of time after which the connection attempt will fail.
            </summary>
            <returns>The value of the connection timeout.</returns>
        </member>
        <member name="P:Enyim.Caching.Configuration.ISocketPoolConfiguration.ReceiveTimeout">
            <summary>
            Gets or sets a value that specifies the amount of time after which receiving data from the socket will fail.
            </summary>
            <returns>The value of the receive timeout.</returns>
        </member>
        <member name="P:Enyim.Caching.Configuration.ISocketPoolConfiguration.DeadTimeout">
            <summary>
            Gets or sets a value that specifies the amount of time after which an unresponsive (dead) server will be checked if it is working.
            </summary>
            <returns>The value of the dead timeout.</returns>
        </member>
        <member name="T:NorthScale.Store.Configuration.NorthScaleClientConfiguration">
            <summary>
            Configuration class
            </summary>
        </member>
        <member name="P:NorthScale.Store.Configuration.INorthScaleClientConfiguration.Urls">
            <summary>
            Gets a list of <see cref="T:IPEndPoint"/> each representing a Memcached server in the pool.
            </summary>
        </member>
        <member name="P:NorthScale.Store.Configuration.INorthScaleClientConfiguration.SocketPool">
            <summary>
            Gets the configuration of the socket pool.
            </summary>
        </member>
        <member name="P:NorthScale.Store.Configuration.INorthScaleClientConfiguration.KeyTransformer">
            <summary>
            Gets or sets the type of the <see cref="T:Enyim.Caching.Memcached.IMemcachedKeyTransformer"/> which will be used to convert item keys for Memcached.
            </summary>
        </member>
        <member name="P:NorthScale.Store.Configuration.INorthScaleClientConfiguration.NodeLocator">
            <summary>
            Gets or sets the type of the <see cref="T:Enyim.Caching.Memcached.IMemcachedNodeLocator"/> which will be used to assign items to Memcached nodes.
            </summary>
        </member>
        <member name="P:NorthScale.Store.Configuration.INorthScaleClientConfiguration.Transcoder">
            <summary>
            Gets or sets the type of the <see cref="T:Enyim.Caching.Memcached.ITranscoder"/> which will be used serialzie or deserialize items.
            </summary>
        </member>
        <member name="P:NorthScale.Store.Configuration.INorthScaleClientConfiguration.Credentials">
            <summary>
            Gets the credentials used to connect to the REST API of the cluster.
            </summary>
        </member>
        <member name="M:NorthScale.Store.Configuration.NorthScaleClientConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MemcachedClientConfiguration"/> class.
            </summary>
        </member>
        <member name="P:NorthScale.Store.Configuration.NorthScaleClientConfiguration.Urls">
            <summary>
            Gets a list of <see cref="T:IPEndPoint"/> each representing a Memcached server in the pool.
            </summary>
        </member>
        <member name="P:NorthScale.Store.Configuration.NorthScaleClientConfiguration.SocketPool">
            <summary>
            Gets the configuration of the socket pool.
            </summary>
        </member>
        <member name="P:NorthScale.Store.Configuration.NorthScaleClientConfiguration.KeyTransformer">
            <summary>
            Gets or sets the type of the <see cref="T:Enyim.Caching.Memcached.IMemcachedKeyTransformer"/> which will be used to convert item keys for Memcached.
            </summary>
        </member>
        <member name="P:NorthScale.Store.Configuration.NorthScaleClientConfiguration.NodeLocator">
            <summary>
            Gets or sets the type of the <see cref="T:Enyim.Caching.Memcached.IMemcachedNodeLocator"/> which will be used to assign items to Memcached nodes.
            </summary>
        </member>
        <member name="P:NorthScale.Store.Configuration.NorthScaleClientConfiguration.Transcoder">
            <summary>
            Gets or sets the type of the <see cref="T:Enyim.Caching.Memcached.ITranscoder"/> which will be used serialzie or deserialize items.
            </summary>
        </member>
        <member name="T:Enyim.Caching.Memcached.TranscoderBase">
            <summary>
            Provides an interface for serializing items for Memcached.
            </summary>
        </member>
        <member name="M:Enyim.Caching.Memcached.TranscoderBase.IsCompressed(Enyim.Caching.Memcached.CacheItem)">
            <summary>
            Determines if the given item has enabled compression.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Enyim.Caching.Memcached.TranscoderBase.Serialize(System.Object)">
            <summary>
            Serializes an object for storing in the cache.
            </summary>
            <param name="o">The object to serialize</param>
            <returns>The serialized object</returns>
            <remarks>Method can throw an exception, then the RES_PAYLOAD_FAILURE should be returned by caller method.</remarks>
        </member>
        <member name="M:Enyim.Caching.Memcached.TranscoderBase.Deserialize(Enyim.Caching.Memcached.CacheItem)">
            <summary>
            De-serializes the <see cref="T:CacheItem"/> into an object.
            </summary>
            <param name="item">The stream that contains the data to de-serialize.</param>
            <returns>The deserialized object</returns>
            <remarks>Method can throw an exception, then the RES_PAYLOAD_FAILURE should be returned by caller method.</remarks>
        </member>
        <member name="M:Enyim.Caching.Memcached.TranscoderBase.DoSerialize(System.Object,System.Boolean)">
            <summary>
            Perform serialization.
            </summary>
            <param name="o">Object to serialize.</param>
            <param name="compressionFlagAllowed">Allow compression.</param>
            <returns></returns>
        </member>
        <member name="M:Enyim.Caching.Memcached.TranscoderBase.DoDeserialize(Enyim.Caching.Memcached.CacheItem)">
            <summary>
            Perform deserialization.
            </summary>
            <param name="item">Item to be deserialized.</param>
            <returns>Deserialized object.</returns>
        </member>
        <member name="P:Enyim.Caching.Memcached.TranscoderBase.Compression">
            <summary>
            Indicates if the compression within Serialization process is enabled. Default is false (not explicitly set).
            </summary>
        </member>
        <member name="T:Enyim.Caching.Memcached.Operations.ItemOperation">
            <summary>
            Base class for implementing operations working with keyed items. Handles server selection based on item key.
            </summary>
        </member>
        <member name="F:Enyim.Caching.Memcached.Operations.ItemOperation.HashedKey">
            <summary>
            Transformed key. By default it's equal to Key.
            </summary>
        </member>
        <member name="T:Enyim.Caching.Memcached.NamedIPEndPoint">
            <summary>
            The IPEndPoint with the additional HostName property.
            </summary>
        </member>
        <member name="F:Enyim.Caching.Memcached.NamedIPEndPoint.HostName">
            <summary>
            The host name.
            </summary>
        </member>
        <member name="F:Enyim.Caching.Memcached.NamedIPEndPoint.Weight">
            <summary>
            The server weight hint.
            
            The weight of the server relative to the total weight of all the servers in the pool.
            This controls the probability of the server being selected for operations.
            This is used only with consistent distribution option and usually corresponds to the amount of memory available to memcache on that server. 
            </summary>
        </member>
        <member name="M:Enyim.Caching.Memcached.NamedIPEndPoint.#ctor(System.String,System.Int32,System.Int32,System.Net.IPAddress)">
            <summary>
            Init.
            </summary>
            <param name="host">Host name.</param>
            <param name="port"></param>
            <param name="weight">The server weight, used by locator if consistent distribution is used.</param>
            <param name="address">Host IP address.</param>
        </member>
        <member name="M:Enyim.Caching.Memcached.NamedIPEndPoint.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Init.
            </summary>
            <param name="host"></param>
            <param name="port"></param>
            <param name="weight">The server weight, used by locator if consistent distribution is used.</param>
            <remarks>Can throw an exception if the host cannot be resolved.</remarks>
        </member>
        <member name="T:Enyim.Caching.Memcached.IMemcachedNode">
            <summary>
            Server node.
            </summary>
        </member>
        <member name="M:Enyim.Caching.Memcached.IMemcachedNode.Ping">
            <summary>
            Ping the server.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Enyim.Caching.Memcached.IMemcachedNode.Acquire">
            <summary>
            Acquire socket.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Enyim.Caching.Memcached.IMemcachedNode.EndPoint">
            <summary>
            Address of server.
            </summary>
        </member>
        <member name="P:Enyim.Caching.Memcached.IMemcachedNode.IsAlive">
            <summary>
            Node is alive.
            </summary>
        </member>
        <member name="M:Enyim.Hashes.Hash_Murmur.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:Enyim.Hashes.Hash_Murmur.Initialize">
            <summary>
            Initializes an instance.
            </summary>
        </member>
        <member name="M:Enyim.Hashes.Hash_Murmur.HashFinal">
            <summary>
            Returns the computed <see cref="T:OneAtATime" /> hash value after all data has been written to the object.
            </summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="T:NorthScale.Store.Configuration.UriElement">
            <summary>
            Represents a configuration element that contains a Memcached node address. This class cannot be inherited. 
            </summary>
        </member>
        <member name="P:NorthScale.Store.Configuration.UriElement.Uri">
            <summary>
            Gets or sets the ip address of the node.
            </summary>
        </member>
        <member name="T:NorthScale.Store.Configuration.ServersSection">
            <summary>
            Configures the <see cref="T:MemcachedClient"/>. This class cannot be inherited.
            </summary>
        </member>
        <member name="P:NorthScale.Store.Configuration.ServersSection.Bucket">
            <summary>
            Gets or sets the name of the bucket to be used. Can be overriden at the pool's constructor, and if not pecified the "default" bucket will be used.
            </summary>
        </member>
        <member name="P:NorthScale.Store.Configuration.ServersSection.UserName">
            <summary>
            Gets or sets the user name used to connect to a secured cluster
            </summary>
        </member>
        <member name="P:NorthScale.Store.Configuration.ServersSection.Password">
            <summary>
            Gets or sets the password used to connect to a secured cluster
            </summary>
        </member>
        <member name="P:NorthScale.Store.Configuration.ServersSection.Urls">
            <summary>
            Returns a collection of nodes in the cluster the client should use to retrieve the Memcached nodes.
            </summary>
        </member>
        <member name="T:Enyim.Caching.Memcached.IAuthenticator">
            <summary>
            Authenticator.
            </summary>
        </member>
        <member name="M:Enyim.Caching.Memcached.IAuthenticator.Authenticate(Enyim.Caching.Memcached.PooledSocket)">
            <summary>
            Authenticate.
            </summary>
            <param name="socket"></param>
            <returns></returns>
        </member>
        <member name="T:Enyim.Caching.Memcached.MemcachedException">
            <summary>
            The exception that is thrown when an unknown error occures in the <see cref="T:MemcachedClient"/>
            </summary>
        </member>
        <member name="M:Enyim.Caching.Memcached.MemcachedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MemcachedException"/> class.
            </summary>
        </member>
        <member name="M:Enyim.Caching.Memcached.MemcachedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MemcachedException"/> class with a specified error message.
            </summary>
        </member>
        <member name="M:Enyim.Caching.Memcached.MemcachedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MemcachedException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
        </member>
        <member name="M:Enyim.Caching.Memcached.MemcachedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:MemcachedException"/> class with serialized data.
            </summary>
        </member>
        <member name="T:Enyim.Caching.Memcached.Distribution.DefaultNodeLocator">
            <summary>
            This is a ketama-like consistent hashing based node locator. Used when no other <see cref="T:IMemcachedNodeLocator"/> is specified for the pool.
            </summary>
        </member>
        <member name="T:PHP.Library.Memcached.Memcached">
            <summary>
            Implements PHP functions provided by Memcached extension.
            TODO: thread safe.
            TODO: the rest of the options.
            TODO: the distribution method has to use NamedIPEndPoint.Weight.
            </summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.#ctor(PHP.Core.ScriptContext,System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.#ctor(PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.__construct(PHP.Core.ScriptContext,System.Object)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.__construct(System.Object,PHP.Core.PhpStack)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.add(PHP.Core.ScriptContext,System.Object,System.Object,System.Object)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.add(System.Object,PHP.Core.PhpStack)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.addByKey(PHP.Core.ScriptContext,System.Object,System.Object,System.Object,System.Object)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.addByKey(System.Object,PHP.Core.PhpStack)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.addServer(PHP.Core.ScriptContext,System.Object,System.Object,System.Object)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.addServer(System.Object,PHP.Core.PhpStack)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.addServers(PHP.Core.ScriptContext,System.Object)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.addServers(System.Object,PHP.Core.PhpStack)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.append(PHP.Core.ScriptContext,System.Object,System.Object)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.append(System.Object,PHP.Core.PhpStack)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.appendByKey(PHP.Core.ScriptContext,System.Object,System.Object,System.Object)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.appendByKey(System.Object,PHP.Core.PhpStack)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.cas(PHP.Core.ScriptContext,System.Object,System.Object,System.Object,System.Object)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.cas(System.Object,PHP.Core.PhpStack)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.casByKey(PHP.Core.ScriptContext,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.casByKey(System.Object,PHP.Core.PhpStack)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.decrement(PHP.Core.ScriptContext,System.Object,System.Object)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.decrement(System.Object,PHP.Core.PhpStack)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.delete(PHP.Core.ScriptContext,System.Object,System.Object)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.delete(System.Object,PHP.Core.PhpStack)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.deleteByKey(PHP.Core.ScriptContext,System.Object,System.Object,System.Object)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.deleteByKey(System.Object,PHP.Core.PhpStack)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.fetch(PHP.Core.ScriptContext)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.fetch(System.Object,PHP.Core.PhpStack)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.fetchAll(PHP.Core.ScriptContext)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.fetchAll(System.Object,PHP.Core.PhpStack)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.flush(PHP.Core.ScriptContext,System.Object)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.flush(System.Object,PHP.Core.PhpStack)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.get(PHP.Core.ScriptContext,System.Object,System.Object,System.Object)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.get(System.Object,PHP.Core.PhpStack)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.getByKey(PHP.Core.ScriptContext,System.Object,System.Object,System.Object,System.Object)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.getByKey(System.Object,PHP.Core.PhpStack)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.getDelayed(PHP.Core.ScriptContext,System.Object,System.Object,System.Object)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.getDelayed(System.Object,PHP.Core.PhpStack)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.getDelayedByKey(PHP.Core.ScriptContext,System.Object,System.Object,System.Object,System.Object)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.getDelayedByKey(System.Object,PHP.Core.PhpStack)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.getMulti(PHP.Core.ScriptContext,System.Object,System.Object,System.Object)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.getMulti(System.Object,PHP.Core.PhpStack)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.getMultiByKey(PHP.Core.ScriptContext,System.Object,System.Object,System.Object,System.Object)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.getMultiByKey(System.Object,PHP.Core.PhpStack)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.getOption(PHP.Core.ScriptContext,System.Object)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.getOption(System.Object,PHP.Core.PhpStack)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.getResultCode(PHP.Core.ScriptContext)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.getResultCode(System.Object,PHP.Core.PhpStack)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.getResultMessage(PHP.Core.ScriptContext)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.getResultMessage(System.Object,PHP.Core.PhpStack)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.getServerByKey(PHP.Core.ScriptContext,System.Object)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.getServerByKey(System.Object,PHP.Core.PhpStack)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.getServerList(PHP.Core.ScriptContext)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.getServerList(System.Object,PHP.Core.PhpStack)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.getStats(PHP.Core.ScriptContext)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.getStats(System.Object,PHP.Core.PhpStack)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.getVersion(PHP.Core.ScriptContext)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.getVersion(System.Object,PHP.Core.PhpStack)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.increment(PHP.Core.ScriptContext,System.Object,System.Object)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.increment(System.Object,PHP.Core.PhpStack)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.prepend(PHP.Core.ScriptContext,System.Object,System.Object)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.prepend(System.Object,PHP.Core.PhpStack)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.prependByKey(PHP.Core.ScriptContext,System.Object,System.Object,System.Object)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.prependByKey(System.Object,PHP.Core.PhpStack)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.replace(PHP.Core.ScriptContext,System.Object,System.Object,System.Object)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.replace(System.Object,PHP.Core.PhpStack)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.replaceByKey(PHP.Core.ScriptContext,System.Object,System.Object,System.Object,System.Object)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.replaceByKey(System.Object,PHP.Core.PhpStack)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.set(PHP.Core.ScriptContext,System.Object,System.Object,System.Object)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.set(System.Object,PHP.Core.PhpStack)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.setByKey(PHP.Core.ScriptContext,System.Object,System.Object,System.Object,System.Object)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.setByKey(System.Object,PHP.Core.PhpStack)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.setMulti(PHP.Core.ScriptContext,System.Object,System.Object)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.setMulti(System.Object,PHP.Core.PhpStack)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.setMultiByKey(PHP.Core.ScriptContext,System.Object,System.Object,System.Object)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.setMultiByKey(System.Object,PHP.Core.PhpStack)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.setOption(PHP.Core.ScriptContext,System.Object,System.Object)">
            <summary></summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.setOption(System.Object,PHP.Core.PhpStack)">
            <summary></summary>
        </member>
        <member name="F:PHP.Library.Memcached.Memcached.OPT_COMPRESSION">
            <summary>
            Enables or disables payload compression. When enabled, item values longer than a certain threshold (currently 100 bytes) will be compressed during storage and decompressed during retrieval transparently.
            Type: boolean, default: TRUE.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.Memcached.OPT_SERIALIZER">
            <summary>
            Specifies the serializer to use for serializing non-scalar values. The valid serializers are Memcached::SERIALIZER_PHP or Memcached::SERIALIZER_IGBINARY. The latter is supported only when memcached is configured with --enable-memcached-igbinary option and the igbinary extension is loaded.
            Type: integer, default: Memcached::SERIALIZER_PHP.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.Memcached.OPT_PREFIX_KEY">
            <summary>
            his can be used to create a "domain" for your item keys. The value specified here will be prefixed to each of the keys. It cannot be longer than 128 characters and will reduce the maximum available key size. The prefix is applied only to the item keys, not to the server keys.
            Type: string, default: "".
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.Memcached.OPT_HASH">
            <summary>
            pecifies the hashing algorithm used for the item keys. The valid values are supplied via Memcached::HASH_* constants. Each hash algorithm has its advantages and its disadvantages. Go with the default if you don't know or don't care.
            Type: integer, default: Memcached::HASH_DEFAULT
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.Memcached.OPT_DISTRIBUTION">
            <summary>
            Specifies the method of distributing item keys to the servers. Currently supported methods are modulo and consistent hashing. Consistent hashing delivers better distribution and allows servers to be added to the cluster with minimal cache losses.
            Type: integer, default: Memcached::DISTRIBUTION_MODULA.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.Memcached.OPT_LIBKETAMA_COMPATIBLE">
            <summary>
            Enables or disables compatibility with libketama-like behavior. When enabled, the item key hashing algorithm is set to MD5 and distribution is set to be weighted consistent hashing distribution. This is useful because other libketama-based clients (Python, Ruby, etc.) with the same server configuration will be able to access the keys transparently.
            Note:
            It is highly recommended to enable this option if you want to use consistent hashing, and it may be enabled by default in future releases.
            Type: boolean, default: FALSE.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.Memcached.OPT_BUFFER_WRITES">
            <summary>
            Enables or disables buffered I/O. Enabling buffered I/O causes storage commands to "buffer" instead of being sent. Any action that retrieves data causes this buffer to be sent to the remote connection. Quitting the connection or closing down the connection will also cause the buffered data to be pushed to the remote connection.
            Type: boolean, default: FALSE.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.Memcached.OPT_BINARY_PROTOCOL">
            <summary>
            Enable the use of the binary protocol. Please note that you cannot toggle this option on an open connection.
            Type: boolean, default: FALSE.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.Memcached.OPT_NO_BLOCK">
            <summary>
            Enables or disables asynchronous I/O. This is the fastest transport available for storage functions.
            Type: boolean, default: FALSE.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.Memcached.OPT_TCP_NODELAY">
            <summary>
            Enables or disables the no-delay feature for connecting sockets (may be faster in some environments).
            Type: boolean, default: FALSE.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.Memcached.OPT_SOCKET_SEND_SIZE">
            <summary>
            The maximum socket send buffer in bytes.
            Type: integer, default: varies by platform/kernel configuration.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.Memcached.OPT_SOCKET_RECV_SIZE">
            <summary>
            The maximum socket receive buffer in bytes.
            Type: integer, default: varies by platform/kernel configuration.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.Memcached.OPT_CONNECT_TIMEOUT">
            <summary>
            In non-blocking mode this set the value of the timeout during socket connection, in milliseconds.
            Type: integer, default: 1000.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.Memcached.OPT_RETRY_TIMEOUT">
            <summary>
            The amount of time, in seconds, to wait until retrying a failed connection attempt.
            Type: integer, default: 0.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.Memcached.OPT_SEND_TIMEOUT">
            <summary>
            Socket sending timeout, in microseconds. In cases where you cannot use non-blocking I/O this will allow you to still have timeouts on the sending of data.
            Type: integer, default: 0.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.Memcached.OPT_RECV_TIMEOUT">
            <summary>
            Socket reading timeout, in microseconds. In cases where you cannot use non-blocking I/O this will allow you to still have timeouts on the reading of data.
            Type: integer, default: 0.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.Memcached.OPT_POLL_TIMEOUT">
            <summary>
            Timeout for connection polling, in milliseconds.
            Type: integer, default: 1000.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.Memcached.OPT_CACHE_LOOKUPS">
            <summary>
            Enables or disables caching of DNS lookups.
            Type: boolean, default: FALSE.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.Memcached.OPT_SERVER_FAILURE_LIMIT">
            <summary>
            Specifies the failure limit for server connection attempts. The server will be removed after this many continuous connection failures.
            Type: integer, default: 0.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.Memcached.HAVE_IGBINARY">
            <summary>
            Indicates whether igbinary serializer support is available.
            Type: boolean.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.Memcached.HAVE_JSON">
            <summary>
            Indicates whether JSON serializer support is available.
            Type: boolean.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.Memcached.GET_PRESERVE_ORDER">
            <summary>
            A flag for Memcached::getMulti() and Memcached::getMultiByKey() to ensure that the keys are returned in the same order as they were requested in. Non-existing keys get a default value of NULL.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.Memcached.DISTRIBUTION_MODULA">
            <summary>
            Modulo-based key distribution algorithm.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.Memcached.DISTRIBUTION_CONSISTENT">
            <summary>
            Consistent hashing key distribution algorithm (based on libketama).
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.Memcached.SERIALIZER_PHP">
            <summary>
            The default PHP serializer.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.Memcached.SERIALIZER_IGBINARY">
            <summary>
            The » igbinary serializer. Instead of textual representation it stores PHP data structures in a compact binary form, resulting in space and time gains.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.Memcached.SERIALIZER_JSON">
            <summary>
            The JSON serializer. 
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.Memcached.HASH_DEFAULT">
            <summary>
            The default (Jenkins one-at-a-time) item key hashing algorithm.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.Memcached.HASH_MD5">
            <summary>
            MD5 item key hashing algorithm.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.Memcached.HASH_CRC">
            <summary>
            CRC item key hashing algorithm.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.Memcached.HASH_FNV1_64">
            <summary>
            FNV1_64 item key hashing algorithm.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.Memcached.HASH_FNV1A_64">
            <summary>
            FNV1_64A item key hashing algorithm.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.Memcached.HASH_FNV1_32">
            <summary>
            FNV1_32 item key hashing algorithm.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.Memcached.HASH_FNV1A_32">
            <summary>
            FNV1_32A item key hashing algorithm.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.Memcached.HASH_HSIEH">
            <summary>
            Hsieh item key hashing algorithm.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.Memcached.HASH_MURMUR">
            <summary>
            Murmur item key hashing algorithm.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.Memcached.RES_SUCCESS">
            <summary>
            The operation was successful.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.Memcached.RES_FAILURE">
            <summary>
            The operation failed in some fashion.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.Memcached.RES_HOST_LOOKUP_FAILURE">
            <summary>
            DNS lookup failed.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.Memcached.RES_UNKNOWN_READ_FAILURE">
            <summary>
            Failed to read network data.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.Memcached.RES_PROTOCOL_ERROR">
            <summary>
            Bad command in memcached protocol.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.Memcached.RES_CLIENT_ERROR">
            <summary>
            Error on the client side.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.Memcached.RES_SERVER_ERROR">
            <summary>
            Error on the server side.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.Memcached.RES_WRITE_FAILURE">
            <summary>
            Failed to write network data.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.Memcached.RES_DATA_EXISTS">
            <summary>
            Failed to do compare-and-swap: item you are trying to store has been modified since you last fetched it.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.Memcached.RES_NOTSTORED">
            <summary>
            Item was not stored: but not because of an error. This normally means that either the condition for an "add" or a "replace" command wasn't met, or that the item is in a delete queue.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.Memcached.RES_NOTFOUND">
            <summary>
            Item with this key was not found (with "get" operation or "cas" operations).
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.Memcached.RES_PARTIAL_READ">
            <summary>
            Partial network data read error.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.Memcached.RES_SOME_ERRORS">
            <summary>
            Some errors occurred during multi-get.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.Memcached.RES_NO_SERVERS">
            <summary>
            Server list is empty.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.Memcached.RES_END">
            <summary>
            End of result set.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.Memcached.RES_ERRNO">
            <summary>
            System error.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.Memcached.RES_BUFFERED">
            <summary>
            The operation was buffered.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.Memcached.RES_TIMEOUT">
            <summary>
            The operation timed out.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.Memcached.RES_BAD_KEY_PROVIDED">
            <summary>
            Bad key.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.Memcached.RES_CONNECTION_SOCKET_CREATE_FAILURE">
            <summary>
            Failed to create network socket.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.Memcached.RES_PAYLOAD_FAILURE">
            <summary>
            Payload failure: could not compress/decompress or serialize/unserialize the value.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.Memcached.ProtocolImpl">
            <summary>
            The MemcachedClient client instance.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.Memcached.lastResult">
            <summary>
            The result of the last executed Memcached method. 
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.Memcached.delayedResults">
            <summary>
            List (FIFO) of delayed results. Filled by getDelayedByKey(), peeked by fetch().
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.Memcached.PersistentId">
            <summary>
            Not null and not empty, if the client is persistent.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.Memcached._locker">
            <summary>
            The static locker object.
            </summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.SetResult(PHP.Library.Memcached.ResConstants)">
            <summary>
            Sets the current lastResult and check if it succeeded.
            </summary>
            <param name="rescode"></param>
            <returns>True if rescode is Success.</returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.Dispose(System.Boolean)">
            <summary>
            Dispose memcached by disposing underlaying protocol.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.#ctor">
            <summary>
            Creates a Memcached instance representing the connection to the memcache servers. 
            </summary>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.#ctor(System.String)">
            <summary>
            Creates a Memcached instance representing the connection to the memcache servers. 
            </summary>
            <param name="persistent_id">
            By default the Memcached instances are destroyed at the end of the request.
            To create an instance that persists between requests, use persistent_id  to specify
            a unique ID for the instance. All instances created with the same persistent_id
            will share the same connection.</param>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.__construct(System.String)">
            <summary>
            PHP ctor.
            </summary>
            <param name="persistent_id"></param>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.CreateProtocolImplementation(System.Boolean,Enyim.Caching.Memcached.IServerPool)">
            <summary>
            Create new protocol implementation based on the given arugment.
            </summary>
            <param name="binary"></param>
            <param name="servers"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.StorePersistentClient(PHP.Library.Memcached.Memcached.ClientState,System.String)">
            <summary>
            Store given client state into the persistent cache.
            </summary>
            <param name="state"></param>
            <param name="persistentId"></param>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.CreateNewClient(System.Boolean,Enyim.Caching.Memcached.DefaultServerPool)">
            <summary>
            Create new MemcachedClient object instance with default settings (as it is in PHP).
            </summary>
            <returns>New MemcachedClient instance.</returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.add(System.String,System.Object)">
            <summary>
            Memcached::add() is similar to Memcached::set, but the operation fails if the key  already exists on the server. 
            </summary>
            <param name="key">The key under which to store the value. </param>
            <param name="value">The value to store. </param>
            <returns>Returns TRUE on success or FALSE on failure. The Memcached::getResultCode will return Memcached::RES_NOTSTORED if the key already exists.</returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.add(System.String,System.Object,System.Int32)">
            <summary>
            Memcached::add() is similar to Memcached::set, but the operation fails if the key  already exists on the server. 
            </summary>
            <param name="key">The key under which to store the value. </param>
            <param name="value">The value to store. </param>
            <param name="expiration">The expiration time, defaults to 0. See Expiration Times for more info. </param>
            <returns>Returns TRUE on success or FALSE on failure. The Memcached::getResultCode will return Memcached::RES_NOTSTORED if the key already exists.</returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.addByKey(System.String,System.String,System.Object)">
            <summary>
            Add an item under a new key on a specific server
            Memcached::addByKey() is functionally equivalent to Memcached::add,
            except that the free-form server_key  can be used to map the key
            to a specific server. This is useful if you need to keep a bunch
            of related keys on a certain server. 
            </summary>
            <param name="server_key">The key identifying the server to store the value on. </param>
            <param name="key">The key under which to store the value. </param>
            <param name="value">The value to store. </param>
            <returns>Returns TRUE on success or FALSE on failure. The Memcached::getResultCode will return Memcached::RES_NOTSTORED if the key already exists. </returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.addByKey(System.String,System.String,System.Object,System.Int32)">
            <summary>
            Add an item under a new key on a specific server
            Memcached::addByKey() is functionally equivalent to Memcached::add,
            except that the free-form server_key  can be used to map the key
            to a specific server. This is useful if you need to keep a bunch
            of related keys on a certain server. 
            </summary>
            <param name="server_key">The key identifying the server to store the value on. </param>
            <param name="key">The key under which to store the value. </param>
            <param name="value">The value to store. </param>
            <param name="expiration">The expiration time, defaults to 0. See Expiration Times for more info. </param>
            <returns>Returns TRUE on success or FALSE on failure. The Memcached::getResultCode will return Memcached::RES_NOTSTORED if the key already exists. </returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.cas(System.Double,System.String,System.Object)">
            <summary>
            Memcached::cas() performs a "check and set" operation, so that the item
            will be stored only if no other client has updated it since it was last
            fetched by this client. The check is done via the cas_token  parameter which
            is a unique 64-bit value assigned to the existing item by memcache. See the documentation
            for Memcached::get* methods for how to obtain this token. Note that the token is
            represented as a double due to the limitations of PHP's integer space. 
            </summary>
            <param name="cas_token">Unique value associated with the existing item. Generated by memcache. </param>
            <param name="key">The key under which to store the value. </param>
            <param name="value">The value to store. </param>
            <returns>Returns TRUE on success or FALSE on failure. The Memcached::getResultCode will
            return Memcached::RES_DATA_EXISTS if the item you are trying to store has been modified since you last fetched it. </returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.cas(System.Double,System.String,System.Object,System.Int32)">
            <summary>
            Memcached::cas() performs a "check and set" operation, so that the item
            will be stored only if no other client has updated it since it was last
            fetched by this client. The check is done via the cas_token  parameter which
            is a unique 64-bit value assigned to the existing item by memcache. See the documentation
            for Memcached::get* methods for how to obtain this token. Note that the token is
            represented as a double due to the limitations of PHP's integer space. 
            </summary>
            <param name="cas_token">Unique value associated with the existing item. Generated by memcache. </param>
            <param name="key">The key under which to store the value. </param>
            <param name="value">The value to store. </param>
            <param name="expiration">The expiration time, defaults to 0. See Expiration Times for more info. </param>
            <returns>Returns TRUE on success or FALSE on failure. The Memcached::getResultCode will
            return Memcached::RES_DATA_EXISTS if the item you are trying to store has been modified since you last fetched it. </returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.casByKey(System.Double,System.String,System.String,System.Object)">
            <summary>
            Memcached::casByKey() is functionally equivalent to Memcached::cas, except that the free-form server_key
            can be used to map the key  to a specific server. This is useful if you need to keep a bunch o
            f related keys on a certain server. 
            </summary>
            <param name="cas_token">Unique value associated with the existing item. Generated by memcache. </param>
            <param name="server_key">The key identifying the server to store the value on. </param>
            <param name="key">The key under which to store the value. </param>
            <param name="value">The value to store. </param>
            <returns>Returns TRUE on success or FALSE on failure. The Memcached::getResultCode will return Memcached::RES_DATA_EXISTS
            if the item you are trying to store has been modified since you last fetched it. </returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.casByKey(System.Double,System.String,System.String,System.Object,System.Int32)">
            <summary>
            Memcached::casByKey() is functionally equivalent to Memcached::cas, except that the free-form server_key
            can be used to map the key  to a specific server. This is useful if you need to keep a bunch o
            f related keys on a certain server. 
            </summary>
            <param name="cas_token">Unique value associated with the existing item. Generated by memcache. </param>
            <param name="server_key">The key identifying the server to store the value on. </param>
            <param name="key">The key under which to store the value. </param>
            <param name="value">The value to store. </param>
            <param name="expiration">The expiration time, defaults to 0. See Expiration Times for more info. </param>
            <returns>Returns TRUE on success or FALSE on failure. The Memcached::getResultCode will return Memcached::RES_DATA_EXISTS
            if the item you are trying to store has been modified since you last fetched it. </returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.set(System.String,System.Object)">
            <summary>
            Memcached::set() stores the value  on a memcache server under the specified key .
            The expiration  parameter can be used to control when the value is considered expired.
             
            The value can be any valid PHP type except for resources, because those cannot be
            represented in a serialized form. If the Memcached::OPT_COMPRESSION option is turned on,
            the serialized value will also be compressed before storage. 
            </summary>
            <param name="key">The key under which to store the value. </param>
            <param name="value">The value to store. </param>
            <returns>Returns TRUE on success or FALSE on failure. Use Memcached::getResultCode if necessary. </returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.set(System.String,System.Object,System.Int32)">
            <summary>
            Memcached::set() stores the value  on a memcache server under the specified key .
            The expiration  parameter can be used to control when the value is considered expired.
             
            The value can be any valid PHP type except for resources, because those cannot be
            represented in a serialized form. If the Memcached::OPT_COMPRESSION option is turned on,
            the serialized value will also be compressed before storage. 
            </summary>
            <param name="key">The key under which to store the value. </param>
            <param name="value">The value to store. </param>
            <param name="expiration">The expiration time, defaults to 0. See Expiration Times for more info. </param>
            <returns>Returns TRUE on success or FALSE on failure. Use Memcached::getResultCode if necessary. </returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.setByKey(System.String,System.String,System.Object)">
            <summary>
            Memcached::setByKey() is functionally equivalent to Memcached::set,
            except that the free-form server_key  can be used to map the key  to a specific server.
            This is useful if you need to keep a bunch of related keys on a certain server. 
            </summary>
            <param name="server_key">The key identifying the server to store the value on. </param>
            <param name="key">The key under which to store the value. </param>
            <param name="value">The value to store. </param>
            <returns>Returns TRUE on success or FALSE on failure. Use Memcached::getResultCode if necessary. </returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.setByKey(System.String,System.String,System.Object,System.Int32)">
            <summary>
            Memcached::setByKey() is functionally equivalent to Memcached::set,
            except that the free-form server_key  can be used to map the key  to a specific server.
            This is useful if you need to keep a bunch of related keys on a certain server. 
            </summary>
            <param name="server_key">The key identifying the server to store the value on. </param>
            <param name="key">The key under which to store the value. </param>
            <param name="value">The value to store. </param>
            <param name="expiration">The expiration time, defaults to 0. See Expiration Times for more info. </param>
            <returns>Returns TRUE on success or FALSE on failure. Use Memcached::getResultCode if necessary. </returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.replace(System.String,System.Object)">
            <summary>
            Memcached::replace() is similar to Memcached::set, but the operation fails if the key  does not exist on the server. 
            </summary>
            <param name="key">The key under which to store the value. </param>
            <param name="value">The value to store. </param>
            <returns>Returns TRUE on success or FALSE on failure.
            The Memcached::getResultCode will return Memcached::RES_NOTSTORED if the key does not exist. </returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.replace(System.String,System.Object,System.Int32)">
            <summary>
            Memcached::replace() is similar to Memcached::set, but the operation fails if the key  does not exist on the server. 
            </summary>
            <param name="key">The key under which to store the value. </param>
            <param name="value">The value to store. </param>
            <param name="expiration">The expiration time, defaults to 0. See Expiration Times for more info. </param>
            <returns>Returns TRUE on success or FALSE on failure.
            The Memcached::getResultCode will return Memcached::RES_NOTSTORED if the key does not exist. </returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.replaceByKey(System.String,System.String,System.Object)">
            <summary>
            Memcached::replace() is similar to Memcached::set, but the operation fails if the key  does not exist on the server. 
            </summary>
            <param name="server_key">The key to locate the server node.</param>
            <param name="key">The key under which to store the value. </param>
            <param name="value">The value to store. </param>
            <returns>Returns TRUE on success or FALSE on failure.
            The Memcached::getResultCode will return Memcached::RES_NOTSTORED if the key does not exist. </returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.replaceByKey(System.String,System.String,System.Object,System.Int32)">
            <summary>
            Memcached::replace() is similar to Memcached::set, but the operation fails if the key  does not exist on the server. 
            </summary>
            <param name="server_key">The key to locate the server node.</param>
            <param name="key">The key under which to store the value. </param>
            <param name="value">The value to store. </param>
            <param name="expiration">The expiration time, defaults to 0. See Expiration Times for more info. </param>
            <returns>Returns TRUE on success or FALSE on failure.
            The Memcached::getResultCode will return Memcached::RES_NOTSTORED if the key does not exist. </returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.delete(System.String)">
            <summary>
            Memcached::delete() deletes the key  from the server. The time  parameter is the amount
            of time in seconds (or Unix time until which) the client wishes the server to refuse add
            and replace commands for this key. For this amount of time, the item is put into a delete
            queue, which means that it won't possible to retrieve it by the get command, but add and
            replace command with this key will also fail (the set command will succeed, however). After
            the time passes, the item is finally deleted from server memory. The parameter time 
            defaults to 0 (which means that the item will be deleted immediately and further storage
            commands with this key will succeed). 
            </summary>
            <param name="key">The key to be deleted. </param>
            <returns>Returns TRUE on success or FALSE on failure.
            The Memcached::getResultCode will return Memcached::RES_NOTFOUND if the key does not exist. </returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.delete(System.String,System.Int32)">
            <summary>
            Memcached::delete() deletes the key  from the server. The time  parameter is the amount
            of time in seconds (or Unix time until which) the client wishes the server to refuse add
            and replace commands for this key. For this amount of time, the item is put into a delete
            queue, which means that it won't possible to retrieve it by the get command, but add and
            replace command with this key will also fail (the set command will succeed, however). After
            the time passes, the item is finally deleted from server memory. The parameter time 
            defaults to 0 (which means that the item will be deleted immediately and further storage
            commands with this key will succeed). 
            </summary>
            <param name="key">The key to be deleted. </param>
            <param name="time">The amount of time the server will wait to delete the item. </param>
            <returns>Returns TRUE on success or FALSE on failure.
            The Memcached::getResultCode will return Memcached::RES_NOTFOUND if the key does not exist. </returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.deleteByKey(System.String,System.String)">
            <summary>
            Memcached::deleteByKey() is functionally equivalent to Memcached::delete, except that
            the free-form server_key  can be used to map the key  to a specific server. 
            </summary>
            <param name="server_key">The key identifying the server to store the value on. </param>
            <param name="key">The key to be deleted. </param>
            <returns>Returns TRUE on success or FALSE on failure.
            The Memcached::getResultCode will return Memcached::RES_NOTFOUND if the key does not exist. </returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.deleteByKey(System.String,System.String,System.Int32)">
            <summary>
            Memcached::deleteByKey() is functionally equivalent to Memcached::delete, except that
            the free-form server_key  can be used to map the key  to a specific server. 
            </summary>
            <param name="server_key">The key identifying the server to store the value on. </param>
            <param name="key">The key to be deleted. </param>
            <param name="time">The amount of time the server will wait to delete the item. </param>
            <returns>Returns TRUE on success or FALSE on failure.
            The Memcached::getResultCode will return Memcached::RES_NOTFOUND if the key does not exist. </returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.addServer(System.String,System.Int32)">
            <summary>
            Memcached::addServer() adds the specified server to the server pool.
            No connection is established to the server at this time, but if you are
            using consistent key distribution option (via Memcached::DISTRIBUTION_CONSISTENT
            or Memcached::OPT_LIBKETAMA_COMPATIBLE), some of the internal data structures
            will have to be updated. Thus, if you need to add multiple servers, it is better
            to use Memcached::addServers as the update then happens only once.
             
            The same server may appear multiple times in the server pool, because no duplication
            checks are made. This is not advisable; instead, use the weight option to increase
            the selection weighting of this server. 
            </summary>
            <param name="host">The hostname of the memcache server.
            If the hostname is invalid, data-related operations will set
            Memcached::RES_HOST_LOOKUP_FAILURE  result code. </param>
            <param name="port">The port on which memcache is running. Usually, this is 11211. </param>
            <returns>Returns TRUE on success or FALSE on failure. </returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.addServer(System.String,System.Int32,System.Int32)">
            <summary>
            Memcached::addServer() adds the specified server to the server pool.
            No connection is established to the server at this time, but if you are
            using consistent key distribution option (via Memcached::DISTRIBUTION_CONSISTENT
            or Memcached::OPT_LIBKETAMA_COMPATIBLE), some of the internal data structures
            will have to be updated. Thus, if you need to add multiple servers, it is better
            to use Memcached::addServers as the update then happens only once.
             
            The same server may appear multiple times in the server pool, because no duplication
            checks are made. This is not advisable; instead, use the weight option to increase
            the selection weighting of this server. 
            </summary>
            <param name="host">The hostname of the memcache server.
            If the hostname is invalid, data-related operations will set
            Memcached::RES_HOST_LOOKUP_FAILURE  result code. </param>
            <param name="port">The port on which memcache is running. Usually, this is 11211. </param>
            <param name="weight">The weight of the server relative to the total weight of all
            the servers in the pool. This controls the probability of the server being selected
            for operations. This is used only with consistent distribution option and usually
            corresponds to the amount of memory available to memcache on that server. </param>
            <returns>Returns TRUE on success or FALSE on failure. </returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.addServers(PHP.Core.PhpArray)">
            <summary>
            Memcached::addServers() adds servers  to the server pool. Each entry in servers
            is supposed to an array containing hostname, port, and, optionally, weight of
            the server. No connection is established to the servers at this time.
            
            The same server may appear multiple times in the server pool, because no duplication
            checks are made. This is not advisable; instead, use the weight option to increase
            the selection weighting of this server. 
            </summary>
            <param name="servers">Array of the servers to add to the pool. Each server is an array {host, port[, weight]}</param>
            <returns>Returns TRUE on success or FALSE on failure. </returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.getServerByKey(System.String)">
            <summary>
            Memcached::getServerByKey() returns the server that would be selected by
            a particular server_key  in all the Memcached::*ByKey() operations. 
            </summary>
            <param name="server_key">The key identifying the server to store the value on. </param>
            <returns>Returns TRUE on success or FALSE on failure. Use Memcached::getResultCode if necessary. </returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.getServerList">
            <summary>
            Memcached::getServerList() returns the list of all servers that are in its server pool.
            </summary>
            <returns>The list of all servers in the server pool.</returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.append(System.String,System.String)">
            <summary>
            Memcached::append() appends the given value  string to the value of
            an existing item. The reason that value  is forced to be a string is
            that appending mixed types is not well-defined.
            
            Note: If the Memcached::OPT_COMPRESSION is enabled, the operation
            will fail and a warning will be issued, because appending compressed
            data to a value that is potentially already compressed is not possible. 
            </summary>
            <param name="key">The key under which to store the value. </param>
            <param name="value">The string to append. </param>
            <returns>Returns TRUE on success or FALSE on failure. The Memcached::getResultCode will return Memcached::RES_NOTSTORED if the key does not exist. </returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.appendByKey(System.String,System.String,System.String)">
            <summary>
            Memcached::appendByKey() is functionally equivalent to Memcached::append, except that
            the free-form server_key  can be used to map the key  to a specific server. 
            </summary>
            <param name="server_key">The key identifying the server to store the value on. </param>
            <param name="key">The key under which to store the value. </param>
            <param name="value">The string to append. </param>
            <returns>Returns TRUE on success or FALSE on failure. The Memcached::getResultCode will return Memcached::RES_NOTSTORED if the key does not exist. </returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.prepend(System.String,System.String)">
            <summary>
            Memcached::prepend() prepends the given value  string to the value of an existing item. The reason that value
            is forced to be a string is that prepending mixed types is not well-defined.
             
            Note: If the Memcached::OPT_COMPRESSION is enabled, the operation will fail and a warning
            will be issued, because prepending compressed data to a value that is potentially already compressed is not possible. 
            </summary>
            <param name="key">The key of the item to prepend the data to. </param>
            <param name="value">The string to prepend. </param>
            <returns>Returns TRUE on success or FALSE on failure. The Memcached::getResultCode will return Memcached::RES_NOTSTORED if the key does not exist. </returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.prependByKey(System.String,System.String,System.String)">
            <summary>
            Memcached::prependByKey() is functionally equivalent to Memcached::prepend,
            except that the free-form server_key  can be used to map the key  to a specific server. 
            </summary>
            <param name="server_key">The key identifying the server to store the value on. </param>
            <param name="key">The key of the item to prepend the data to. </param>
            <param name="value">The string to prepend. </param>
            <returns>Returns TRUE on success or FALSE on failure.
            The Memcached::getResultCode will return Memcached::RES_NOTSTORED if the key does not exist. </returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.decrement(System.String)">
            <summary>
            Memcached::decrement() decrements a numeric item's value by the specified offset .
            If the item's value is not numeric, it is treated as if the value were 0. If the operation
            would decrease the value below 0, the new value will be 0. Memcached::decrement() will
            fail if the item does not exist. 
            </summary>
            <param name="key">The key of the item to decrement. </param>
            <returns>Returns item's new value on success or FALSE  on failure.
            The Memcached::getResultCode will return Memcached::RES_NOTFOUND if the key does not exist. </returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.decrement(System.String,System.Int32)">
            <summary>
            Memcached::decrement() decrements a numeric item's value by the specified offset .
            If the item's value is not numeric, it is treated as if the value were 0. If the operation
            would decrease the value below 0, the new value will be 0. Memcached::decrement() will
            fail if the item does not exist. 
            </summary>
            <param name="key">The key of the item to decrement. </param>
            <param name="offset">The amount by which to decrement the item's value. </param>
            <returns>Returns item's new value on success or FALSE  on failure.
            The Memcached::getResultCode will return Memcached::RES_NOTFOUND if the key does not exist. </returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.increment(System.String)">
            <summary>
            Memcached::increment() increments a numeric item's value by the specified offset . If the item's value
            is not numeric, it is treated as if the value were 0. Memcached::increment() will fail if the item does not exist. 
            </summary>
            <param name="key">The key of the item to increment. </param>
            <returns>Returns new item's value on success or FALSE  on failure.
            The Memcached::getResultCode will return Memcached::RES_NOTFOUND if the key does not exist. </returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.increment(System.String,System.Int32)">
            <summary>
            Memcached::increment() increments a numeric item's value by the specified offset . If the item's value
            is not numeric, it is treated as if the value were 0. Memcached::increment() will fail if the item does not exist. 
            </summary>
            <param name="key">The key of the item to increment. </param>
            <param name="offset">The amount by which to increment the item's value. </param>
            <returns>Returns new item's value on success or FALSE  on failure.
            The Memcached::getResultCode will return Memcached::RES_NOTFOUND if the key does not exist. </returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.flush">
            <summary>
            Memcached::flush() invalidates all existing cache items immediately (by default)
            or after the delay  specified. After invalidation none of the items will be returned
            in response to a retrieval command (unless it's stored again under the same key
            after Memcached::flush() has invalidated the items). The flush does not actually free
            all the memory taken up by the existing items; that will happen gradually as new items are stored. 
            </summary>
            <returns>Returns TRUE on success or FALSE on failure. Use Memcached::getResultCode if necessary. </returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.flush(System.Int32)">
            <summary>
            Memcached::flush() invalidates all existing cache items immediately (by default)
            or after the delay  specified. After invalidation none of the items will be returned
            in response to a retrieval command (unless it's stored again under the same key
            after Memcached::flush() has invalidated the items). The flush does not actually free
            all the memory taken up by the existing items; that will happen gradually as new items are stored. 
            </summary>
            <param name="delay">Number of seconds to wait before invalidating the items. </param>
            <returns>Returns TRUE on success or FALSE on failure. Use Memcached::getResultCode if necessary. </returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.get(System.String)">
            <summary>
            Memcached::get() returns the item that was previously stored under the key .
            If the item is found and cas_token  variable is provided, it will contain the CAS token value
            for the item. See Memcached::cas  for how to use CAS tokens. Read-through caching callback may
            be specified via cache_cb  parameter. 
            </summary>
            <returns>Returns the value stored in the cache or FALSE  otherwise. The Memcached::getResultCode will return Memcached::RES_NOTFOUND if the key does not exist. </returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.get(System.String,PHP.Core.PhpCallback)">
            <summary>
            Memcached::get() returns the item that was previously stored under the key .
            If the item is found and cas_token  variable is provided, it will contain the CAS token value
            for the item. See Memcached::cas  for how to use CAS tokens. Read-through caching callback may
            be specified via cache_cb  parameter. 
            </summary>
            <param name="key">The key of the item to retrieve. </param>
            <param name="cache_cb">Read-through caching callback or NULL. </param>
            <returns>Returns the value stored in the cache or FALSE  otherwise. The Memcached::getResultCode will return Memcached::RES_NOTFOUND if the key does not exist. </returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.get(System.String,PHP.Core.PhpCallback,PHP.Core.PhpReference)">
            <summary>
            Memcached::get() returns the item that was previously stored under the key .
            If the item is found and cas_token  variable is provided, it will contain the CAS token value
            for the item. See Memcached::cas  for how to use CAS tokens. Read-through caching callback may
            be specified via cache_cb  parameter. 
            </summary>
            <param name="key">The key of the item to retrieve. </param>
            <param name="cache_cb">Read-through caching callback or NULL. </param>
            <param name="cas_token">The variable to store the CAS token in. </param>
            <returns>Returns the value stored in the cache or FALSE  otherwise. The Memcached::getResultCode will return Memcached::RES_NOTFOUND if the key does not exist. </returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.getByKey(System.String,System.String)">
            <summary>
            Memcached::getByKey() is functionally equivalent to Memcached::get,
            except that the free-form server_key  can be used to map the key  to a specific server. 
            </summary>
            <param name="server_key">The key identifying the server to store the value on. </param>
            <param name="key">The key of the item to fetch. </param>
            <returns>Returns the value stored in the cache or FALSE  otherwise.
            The Memcached::getResultCode will return Memcached::RES_NOTFOUND if the key does not exist. </returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.getByKey(System.String,System.String,PHP.Core.PhpCallback)">
            <summary>
            Memcached::getByKey() is functionally equivalent to Memcached::get,
            except that the free-form server_key  can be used to map the key  to a specific server. 
            </summary>
            <param name="server_key">The key identifying the server to store the value on. </param>
            <param name="key">The key of the item to fetch. </param>
            <param name="cache_cb">Read-through caching callback or NULL</param>
            <returns>Returns the value stored in the cache or FALSE  otherwise.
            The Memcached::getResultCode will return Memcached::RES_NOTFOUND if the key does not exist. </returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.getByKey(System.String,System.String,PHP.Core.PhpCallback,PHP.Core.PhpReference)">
            <summary>
            Memcached::getByKey() is functionally equivalent to Memcached::get,
            except that the free-form server_key  can be used to map the key  to a specific server. 
            </summary>
            <param name="server_key">The key identifying the server to store the value on. </param>
            <param name="key">The key of the item to fetch. </param>
            <param name="cache_cb">Read-through caching callback or NULL</param>
            <param name="cas_token">The variable to store the CAS token in. </param>
            <returns>Returns the value stored in the cache or FALSE  otherwise.
            The Memcached::getResultCode will return Memcached::RES_NOTFOUND if the key does not exist. </returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.getDelayed(PHP.Core.PhpArray)">
            <summary>
            Memcached::getDelayed() issues a request to memcache for multiple items the keys
            of which are specified in the keys  array. The method does not wait for response and
            returns right away. When you are ready to collect the items, call either Memcached::fetch
            or Memcached::fetchAll. If with_cas  is true, the CAS token values will also be requested.
             
            Instead of fetching the results explicitly, you can specify a result callback via value_cb parameter. 
            </summary>
            <param name="keys">Array of keys to request. </param>
            <returns>Returns TRUE on success or FALSE on failure. Use Memcached::getResultCode if necessary. </returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.getDelayed(PHP.Core.PhpArray,System.Boolean)">
            <summary>
            Memcached::getDelayed() issues a request to memcache for multiple items the keys
            of which are specified in the keys  array. The method does not wait for response and
            returns right away. When you are ready to collect the items, call either Memcached::fetch
            or Memcached::fetchAll. If with_cas  is true, the CAS token values will also be requested.
             
            Instead of fetching the results explicitly, you can specify a result callback via value_cb parameter. 
            </summary>
            <param name="keys">Array of keys to request. </param>
            <param name="with_cas">Whether to request CAS token values also. </param>
            <returns>Returns TRUE on success or FALSE on failure. Use Memcached::getResultCode if necessary. </returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.getDelayed(PHP.Core.PhpArray,System.Boolean,PHP.Core.PhpCallback)">
            <summary>
            Memcached::getDelayed() issues a request to memcache for multiple items the keys
            of which are specified in the keys  array. The method does not wait for response and
            returns right away. When you are ready to collect the items, call either Memcached::fetch
            or Memcached::fetchAll. If with_cas  is true, the CAS token values will also be requested.
             
            Instead of fetching the results explicitly, you can specify a result callback via value_cb parameter. 
            </summary>
            <param name="keys">Array of keys to request. </param>
            <param name="with_cas">Whether to request CAS token values also. </param>
            <param name="value_cb">The result callback or NULL. </param>
            <returns>Returns TRUE on success or FALSE on failure. Use Memcached::getResultCode if necessary. </returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.getDelayedByKey(System.String,PHP.Core.PhpArray)">
            <summary>
            Memcached::getDelayedByKey() is functionally equivalent to Memcached::getDelayed, except
            that the free-form server_key  can be used to map the keys  to a specific server. 
            </summary>
            <param name="server_key">The key identifying the server to store the value on. </param>
            <param name="keys">Array of keys to request. </param>
            <returns>Returns TRUE on success or FALSE on failure. Use Memcached::getResultCode if necessary. </returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.getDelayedByKey(System.String,PHP.Core.PhpArray,System.Boolean)">
            <summary>
            Memcached::getDelayedByKey() is functionally equivalent to Memcached::getDelayed, except
            that the free-form server_key  can be used to map the keys  to a specific server. 
            </summary>
            <param name="server_key">The key identifying the server to store the value on. </param>
            <param name="keys">Array of keys to request. </param>
            <param name="with_cas">Whether to request CAS token values also. </param>
            <returns>Returns TRUE on success or FALSE on failure. Use Memcached::getResultCode if necessary. </returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.getDelayedByKey(System.String,PHP.Core.PhpArray,System.Boolean,PHP.Core.PhpCallback)">
            <summary>
            Memcached::getDelayedByKey() is functionally equivalent to Memcached::getDelayed, except
            that the free-form server_key  can be used to map the keys  to a specific server. 
            </summary>
            <param name="server_key">The key identifying the server to store the value on. </param>
            <param name="keys">Array of keys to request. </param>
            <param name="with_cas">Whether to request CAS token values also. </param>
            <param name="value_cb">The result callback or NULL. </param>
            <returns>Returns TRUE on success or FALSE on failure. Use Memcached::getResultCode if necessary. </returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.getFetchedItem(System.String,Enyim.Caching.Memcached.ResultObj,System.Boolean)">
            <summary>
            Internal fetch method, fetches items from provided (key;value) dictionary.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="withCas"></param>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.fetch">
            <summary>
            Memcached::fetch() retrieves the next result from the last request. 
            </summary>
            <returns>Returns the next result or FALSE otherwise.
            The Memcached::getResultCode will return Memcached::RES_END if result set is exhausted. </returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.fetchAll">
            <summary>
            Memcached::fetchAll() retrieves all the remaining results from the last request. 
            </summary>
            <returns>Returns the results or FALSE on failure.
            Use Memcached::getResultCode if necessary. </returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.getMulti(PHP.Core.PhpArray)">
            <summary>
            Memcached::getMulti() is similar to Memcached::get, but instead of a single key item,
            it retrieves multiple items the keys of which are specified in the keys  array. If cas_tokens
            variable is provided, it is filled with the CAS token values for the found items.
             
            Note: Unlike Memcached::get it is not possible to specify a read-through cache callback
            for Memcached::getMulti(), because the memcache protocol does not provide information on which
            keys were not found in the multi-key request.
            
            The flags parameter can be used to specify additional options for Memcached::getMulti().
            Currently, the only available option is Memcached::GET_PRESERVE_ORDER that ensures that
            the keys are returned in the same order as they were requested in. 
            </summary>
            <param name="keys">Array of keys to retrieve. </param>
            <returns>Returns the array of found items or FALSE  on failure. Use Memcached::getResultCode if necessary. </returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.getMulti(PHP.Core.PhpArray,PHP.Core.PhpReference)">
            <summary>
            Memcached::getMulti() is similar to Memcached::get, but instead of a single key item,
            it retrieves multiple items the keys of which are specified in the keys  array. If cas_tokens
            variable is provided, it is filled with the CAS token values for the found items.
             
            Note: Unlike Memcached::get it is not possible to specify a read-through cache callback
            for Memcached::getMulti(), because the memcache protocol does not provide information on which
            keys were not found in the multi-key request.
            
            The flags parameter can be used to specify additional options for Memcached::getMulti().
            Currently, the only available option is Memcached::GET_PRESERVE_ORDER that ensures that
            the keys are returned in the same order as they were requested in. 
            </summary>
            <param name="keys">Array of keys to retrieve. </param>
            <param name="cas_tokens">The variable to store the CAS tokens for the found items. </param>
            <returns>Returns the array of found items or FALSE  on failure. Use Memcached::getResultCode if necessary. </returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.getMulti(PHP.Core.PhpArray,PHP.Core.PhpReference,System.Int32)">
            <summary>
            Memcached::getMulti() is similar to Memcached::get, but instead of a single key item,
            it retrieves multiple items the keys of which are specified in the keys  array. If cas_tokens
            variable is provided, it is filled with the CAS token values for the found items.
             
            Note: Unlike Memcached::get it is not possible to specify a read-through cache callback
            for Memcached::getMulti(), because the memcache protocol does not provide information on which
            keys were not found in the multi-key request.
            
            The flags parameter can be used to specify additional options for Memcached::getMulti().
            Currently, the only available option is Memcached::GET_PRESERVE_ORDER that ensures that
            the keys are returned in the same order as they were requested in. 
            </summary>
            <param name="keys">Array of keys to retrieve. </param>
            <param name="cas_tokens">The variable to store the CAS tokens for the found items. </param>
            <param name="flags">The flags for the get operation. </param>
            <returns>Returns the array of found items or FALSE  on failure. Use Memcached::getResultCode if necessary. </returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.getMultiByKey(System.String,PHP.Core.PhpArray)">
            <summary>
            Memcached::getMultiByKey() is functionally equivalent to Memcached::getMulti,
            except that the free-form server_key  can be used to map the keys  to a specific server. 
            </summary>
            <param name="server_key">The key identifying the server to store the value on. </param>
            <param name="keys">Array of keys to retrieve. </param>
            <returns>Returns the array of found items or FALSE  on failure. Use Memcached::getResultCode if necessary. </returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.getMultiByKey(System.String,PHP.Core.PhpArray,PHP.Core.PhpReference)">
            <summary>
            Memcached::getMultiByKey() is functionally equivalent to Memcached::getMulti,
            except that the free-form server_key  can be used to map the keys  to a specific server. 
            </summary>
            <param name="server_key">The key identifying the server to store the value on. </param>
            <param name="keys">Array of keys to retrieve. </param>
            <param name="cas_tokens">The variable to store the CAS tokens for the found items. </param>
            <returns>Returns the array of found items or FALSE  on failure. Use Memcached::getResultCode if necessary. </returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.getMultiByKey(System.String,PHP.Core.PhpArray,PHP.Core.PhpReference,System.Int32)">
            <summary>
            Memcached::getMultiByKey() is functionally equivalent to Memcached::getMulti,
            except that the free-form server_key  can be used to map the keys  to a specific server. 
            </summary>
            <param name="server_key">The key identifying the server to store the value on. </param>
            <param name="keys">Array of keys to retrieve. </param>
            <param name="cas_tokens">The variable to store the CAS tokens for the found items. </param>
            <param name="flags">The flags for the get operation. </param>
            <returns>Returns the array of found items or FALSE  on failure. Use Memcached::getResultCode if necessary. </returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.getMultiInternal(System.String,PHP.Core.PhpArray,PHP.Library.Memcached.GetConstants)">
            <summary>
            Get requested items.
            </summary>
            <param name="server_key"></param>
            <param name="keys"></param>
            <param name="flags"></param>
            <returns>List of items. If PreserverOrder is specified, values of missng keys are added with its default value (null).</returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.getValidKeysList(PHP.Core.PhpArray)">
            <summary>
            Get list of valid keys from keys PhpArray.
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.setMulti(PHP.Core.PhpArray)">
            <summary>
            Memcached::setMulti() is similar to Memcached::set, but instead of a single key/value item,
            it works on multiple items specified in items .
            The expiration  time applies to all the items at once. 
            </summary>
            <param name="items">An array of key/value pairs to store on the server. </param>
            <returns>Returns TRUE on success or FALSE on failure. Use Memcached::getResultCode if necessary. </returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.setMulti(PHP.Core.PhpArray,System.Int32)">
            <summary>
            Memcached::setMulti() is similar to Memcached::set, but instead of a single key/value item,
            it works on multiple items specified in items .
            The expiration  time applies to all the items at once. 
            </summary>
            <param name="items">An array of key/value pairs to store on the server. </param>
            <param name="expiration">The expiration time, defaults to 0. See Expiration Times for more info. </param>
            <returns>Returns TRUE on success or FALSE on failure. Use Memcached::getResultCode if necessary. </returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.setMultiByKey(System.String,PHP.Core.PhpArray)">
            <summary>
            Memcached::setMultiByKey() is functionally equivalent to Memcached::setMulti,
            except that the free-form server_key  can be used to map the keys from items  to a specific server.
            This is useful if you need to keep a bunch of related keys on a certain server. 
            </summary>
            <param name="server_key">The key identifying the server to store the value on. </param>
            <param name="items">An array of key/value pairs to store on the server. </param>
            <returns>Returns TRUE on success or FALSE on failure. Use Memcached::getResultCode if necessary. </returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.setMultiByKey(System.String,PHP.Core.PhpArray,System.Int32)">
            <summary>
            Memcached::setMultiByKey() is functionally equivalent to Memcached::setMulti,
            except that the free-form server_key  can be used to map the keys from items  to a specific server.
            This is useful if you need to keep a bunch of related keys on a certain server. 
            </summary>
            <param name="server_key">The key identifying the server to store the value on. </param>
            <param name="items">An array of key/value pairs to store on the server. </param>
            <param name="expiration">The expiration time, defaults to 0. See Expiration Times for more info. </param>
            <returns>Returns TRUE on success or FALSE on failure. Use Memcached::getResultCode if necessary. </returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.getOption(System.Int32)">
            <summary>
            This method returns the value of a Memcached option . Some options correspond to the ones defined by
            libmemcached, and some are specific to the extension.
            
            See Memcached Constants for more information. 
            </summary>
            <param name="option">One of the Memcached::OPT_* constants. </param>
            <returns>Returns the value of the requested option, or FALSE on error. </returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.setOption(System.Int32,System.Object)">
            <summary>
            This method sets the value of a Memcached option .
            Some options correspond to the ones defined by libmemcached, and some are specific to the extension.
            See Memcached Constants for more information.
             
            The options listed below require values specified via constants.
            - Memcached::OPT_HASH requires Memcached::HASH_* values.
            - Memcached::OPT_DISTRIBUTION requires Memcached::DISTRIBUTION_* values.
            </summary>
            <param name="option"></param>
            <param name="value"></param>
            <returns>Returns TRUE on success or FALSE on failure. </returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.SwitchProtocol(System.Boolean)">
            <summary>
            Set new protocol (binary/text).
            </summary>
            <param name="wantBinary">Use binary protocol?</param>
            <returns>True if it succeeded.</returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.getResultCode">
            <summary>
            Memcached::getResultCode() returns one of the Memcached::RES_* constants that is the result of the last executed Memcached method. 
            </summary>
            <returns>Result code of the last Memcached operation. </returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.getResultMessage">
            <summary>
            Memcached::getResultMessage() returns a string that describes the result code of the last executed Memcached method. 
            </summary>
            <returns>Message describing the result of the last Memcached operation. </returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.getStats">
            <summary>
            Memcached::getStats() returns an array containing the state of all available memcache servers.
            See » memcache protocol specification for details on these statistics. 
            </summary>
            <returns>Array of server statistics, one entry per server. </returns>
        </member>
        <member name="M:PHP.Library.Memcached.Memcached.getVersion">
            <summary>
            Memcached::getVersion() returns an array containing the version info for all available memcache servers. 
            </summary>
            <returns>Array of server versions, one entry per server. </returns>
        </member>
        <member name="P:PHP.Library.Memcached.Memcached.IsPersistent">
            <summary>
            Indicates if the memcached object is persistent.
            </summary>
        </member>
        <member name="P:PHP.Library.Memcached.Memcached.PersistentClients">
            <summary>
            Dictionary of persistent MemcachedClients. List initialized on the first use.
            Thread safe.
            </summary>
        </member>
        <member name="T:PHP.Library.Memcached.Memcached.ClientState">
            <summary>
            The memcached client and its collection of servers.
            </summary>
        </member>
        <member name="T:NorthScale.Store.Configuration.NorthScaleClientSection">
            <summary>
            Configures the <see cref="T:MemcachedClient"/>. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:NorthScale.Store.Configuration.NorthScaleClientSection.PostDeserialize">
            <summary>
            Called after deserialization.
            </summary>
        </member>
        <member name="P:NorthScale.Store.Configuration.NorthScaleClientSection.Servers">
            <summary>
            Servers.
            </summary>
        </member>
        <member name="P:NorthScale.Store.Configuration.NorthScaleClientSection.SocketPool">
            <summary>
            Gets or sets the configuration of the socket pool.
            </summary>
        </member>
        <member name="P:NorthScale.Store.Configuration.NorthScaleClientSection.KeyTransformer">
            <summary>
            Gets or sets the type of the <see cref="T:Enyim.Caching.Memcached.IMemcachedKeyTransformer"/> which will be used to convert item keys for Memcached.
            </summary>
        </member>
        <member name="P:NorthScale.Store.Configuration.NorthScaleClientSection.NodeLocator">
            <summary>
            Gets or sets the type of the <see cref="T:Enyim.Caching.Memcached.IMemcachedNodeLocator"/> which will be used to assign items to Memcached nodes.
            </summary>
        </member>
        <member name="P:NorthScale.Store.Configuration.NorthScaleClientSection.Transcoder">
            <summary>
            Gets or sets the type of the <see cref="T:Enyim.Caching.Memcached.ITranscoder"/> which will be used serialzie or deserialize items.
            </summary>
        </member>
        <member name="M:NorthScale.Store.ConfigHelper.CreateClient(System.Net.ICredentials)">
            <summary>
            Creates a WebClient for communicating with the REST API.
            </summary>
            <param name="credentials"></param>
            <returns></returns>
        </member>
        <member name="T:Enyim.Caching.Memcached.MemcachedClientException">
            <summary>
            The exception that is thrown when a client error occures during communicating with the Memcached servers.
            </summary>
        </member>
        <member name="M:Enyim.Caching.Memcached.MemcachedClientException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MemcachedClientException"/> class.
            </summary>
        </member>
        <member name="M:Enyim.Caching.Memcached.MemcachedClientException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MemcachedClientException"/> class with a specified error message.
            </summary>
        </member>
        <member name="M:Enyim.Caching.Memcached.MemcachedClientException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MemcachedClientException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
        </member>
        <member name="M:Enyim.Caching.Memcached.MemcachedClientException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:MemcachedClientException"/> class with serialized data.
            </summary>
        </member>
        <member name="T:Enyim.Caching.Memcached.ResultObj">
            <summary>
            Result of get operation.
            </summary>
        </member>
        <member name="F:Enyim.Caching.Memcached.ResultObj.value">
            <summary>
            Value.
            </summary>
        </member>
        <member name="F:Enyim.Caching.Memcached.ResultObj.cas">
            <summary>
            CAS flag.
            </summary>
        </member>
        <member name="T:Enyim.Caching.Memcached.KeyEnumPrefixed">
            <summary>
            String enumerator that returns values of another string enumerator with given prefix.
            </summary>
        </member>
        <member name="T:Enyim.Caching.Memcached.Operations.Binary.ResponseStatus">
            <summary>
            Binary response statuses.
            </summary>
        </member>
        <member name="T:Enyim.Hashes.Hash_FNV1_64">
            <summary>
            Implements a FNV1_64.
            </summary>
            <remarks>
            Calculation found at http://lists.danga.com/pipermail/memcached/2007-April/003846.html, but 
            it is pretty much available everywhere
            </remarks>
        </member>
        <member name="M:Enyim.Hashes.Hash_FNV1_64.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FNV64"/> class.
            </summary>
        </member>
        <member name="M:Enyim.Hashes.Hash_FNV1_64.Initialize">
            <summary>
            Initializes an instance of <see cref="T:FNV64"/>.
            </summary>
        </member>
        <member name="M:Enyim.Hashes.Hash_FNV1_64.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>Routes data written to the object into the <see cref="T:FNV1_64" /> hash algorithm for computing the hash.</summary>
            <param name="array">The input data. </param>
            <param name="ibStart">The offset into the byte array from which to begin using data. </param>
            <param name="cbSize">The number of bytes in the array to use as data. </param>
        </member>
        <member name="M:Enyim.Hashes.Hash_FNV1_64.HashFinal">
            <summary>
            Returns the computed <see cref="T:FNV1_64" /> hash value after all data has been written to the object.
            </summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="T:Enyim.Hashes.Hash_FNV1a_64">
            <summary>
            Implements an FNV1a_64 hash algorithm.
            </summary>
        </member>
        <member name="F:Enyim.Hashes.Hash_FNV1a_64.CurrentHashValue">
            <summary>
            The current hash value.
            </summary>
        </member>
        <member name="M:Enyim.Hashes.Hash_FNV1a_64.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FNV1a"/> class.
            </summary>
        </member>
        <member name="M:Enyim.Hashes.Hash_FNV1a_64.Initialize">
            <summary>
            Initializes an instance of <see cref="T:FNV1a"/>.
            </summary>
        </member>
        <member name="M:Enyim.Hashes.Hash_FNV1a_64.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>Routes data written to the object into the <see cref="T:FNV1a_64" /> hash algorithm for computing the hash.</summary>
            <param name="array">The input data. </param>
            <param name="ibStart">The offset into the byte array from which to begin using data. </param>
            <param name="cbSize">The number of bytes in the array to use as data. </param>
        </member>
        <member name="M:Enyim.Hashes.Hash_FNV1a_64.HashFinal">
            <summary>
            Returns the computed <see cref="T:FNV1a_64" /> hash value after all data has been written to the object.
            </summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="T:Enyim.Hashes.Hash_FNV1_32">
            <summary>
            Implements a FNV1_32.
            </summary>
            <remarks>
            Calculation found at http://lists.danga.com/pipermail/memcached/2007-April/003846.html, but 
            it is pretty much available everywhere
            </remarks>
        </member>
        <member name="M:Enyim.Hashes.Hash_FNV1_32.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FNV64"/> class.
            </summary>
        </member>
        <member name="M:Enyim.Hashes.Hash_FNV1_32.Initialize">
            <summary>
            Initializes an instance of <see cref="T:Hash_FNV1_32"/>.
            </summary>
        </member>
        <member name="M:Enyim.Hashes.Hash_FNV1_32.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>Routes data written to the object into the <see cref="T:FNV1_32" /> hash algorithm for computing the hash.</summary>
            <param name="array">The input data. </param>
            <param name="ibStart">The offset into the byte array from which to begin using data. </param>
            <param name="cbSize">The number of bytes in the array to use as data. </param>
        </member>
        <member name="M:Enyim.Hashes.Hash_FNV1_32.HashFinal">
            <summary>
            Returns the computed <see cref="T:FNV1_32" /> hash value after all data has been written to the object.
            </summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="T:Enyim.Hashes.Hash_FNV1a_32">
            <summary>
            Implements an FNV1a_32 hash algorithm.
            </summary>
        </member>
        <member name="F:Enyim.Hashes.Hash_FNV1a_32.CurrentHashValue">
            <summary>
            The current hash value.
            </summary>
        </member>
        <member name="M:Enyim.Hashes.Hash_FNV1a_32.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FNV1a"/> class.
            </summary>
        </member>
        <member name="M:Enyim.Hashes.Hash_FNV1a_32.Initialize">
            <summary>
            Initializes an instance of <see cref="T:FNV1a"/>.
            </summary>
        </member>
        <member name="M:Enyim.Hashes.Hash_FNV1a_32.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>Routes data written to the object into the <see cref="T:FNV1a_32" /> hash algorithm for computing the hash.</summary>
            <param name="array">The input data. </param>
            <param name="ibStart">The offset into the byte array from which to begin using data. </param>
            <param name="cbSize">The number of bytes in the array to use as data. </param>
        </member>
        <member name="M:Enyim.Hashes.Hash_FNV1a_32.HashFinal">
            <summary>
            Returns the computed <see cref="T:FNV1a_32" /> hash value after all data has been written to the object.
            </summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="T:Enyim.Hashes.ModifiedFNV">
            <summary>
            Implements a modified FNV hash. Provides better distribution than FNV1 but it's only 32 bit long.
            </summary>
            <remarks>Algorithm found at http://bretm.home.comcast.net/hash/6.html</remarks>
        </member>
        <member name="M:Enyim.Hashes.ModifiedFNV.HashFinal">
            <summary>
            Returns the computed <see cref="T:ModifiedFNV" /> hash value after all data has been written to the object.
            </summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="T:Enyim.Caching.Configuration.MemcachedClientConfiguration">
            <summary>
            COnfiguration class
            </summary>
        </member>
        <member name="T:Enyim.Caching.Configuration.IMemcachedClientConfiguration">
            <summary>
            Defines an interface for configuring the <see cref="T:MemcachedClient"/>.
            </summary>
        </member>
        <member name="P:Enyim.Caching.Configuration.IMemcachedClientConfiguration.SocketPool">
            <summary>
            Gets the configuration of the socket pool.
            </summary>
        </member>
        <member name="P:Enyim.Caching.Configuration.IMemcachedClientConfiguration.Authentication">
            <summary>
            Gets the authentication settings.
            </summary>
        </member>
        <member name="M:Enyim.Caching.Configuration.MemcachedClientConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MemcachedClientConfiguration"/> class.
            </summary>
        </member>
        <member name="P:Enyim.Caching.Configuration.MemcachedClientConfiguration.SocketPool">
            <summary>
            Gets the configuration of the socket pool.
            </summary>
        </member>
        <member name="P:Enyim.Caching.Configuration.MemcachedClientConfiguration.Authentication">
            <summary>
            Gets the authentication settings.
            </summary>
        </member>
        <member name="P:Enyim.Caching.Configuration.MemcachedClientConfiguration.Enyim#Caching#Configuration#IMemcachedClientConfiguration#SocketPool">
            <summary>
            Gets or sets the type of the <see cref="T:Enyim.Caching.Memcached.ITranscoder"/> which will be used serialzie or deserialize items.
            </summary>
        </member>
        <member name="T:Enyim.Caching.Memcached.StatItem">
            <summary>
            Represent a stat item returned by Memcached.
            </summary>
        </member>
        <member name="F:Enyim.Caching.Memcached.StatItem.Uptime">
            <summary>
            The number of seconds the server has been running.
            </summary>
        </member>
        <member name="F:Enyim.Caching.Memcached.StatItem.ServerTime">
            <summary>
            Current time according to the server.
            </summary>
        </member>
        <member name="F:Enyim.Caching.Memcached.StatItem.Version">
            <summary>
            The version of the server.
            </summary>
        </member>
        <member name="F:Enyim.Caching.Memcached.StatItem.ItemCount">
            <summary>
            The number of items stored by the server.
            </summary>
        </member>
        <member name="F:Enyim.Caching.Memcached.StatItem.TotalItems">
            <summary>
            The total number of items stored by the server including the ones whihc have been already evicted.
            </summary>
        </member>
        <member name="F:Enyim.Caching.Memcached.StatItem.ConnectionCount">
            <summary>
            Number of active connections to the server.
            </summary>
        </member>
        <member name="F:Enyim.Caching.Memcached.StatItem.TotalConnections">
            <summary>
            The total number of connections ever made to the server.
            </summary>
        </member>
        <member name="F:Enyim.Caching.Memcached.StatItem.ConnectionStructures">
            <summary>
            ?
            </summary>
        </member>
        <member name="F:Enyim.Caching.Memcached.StatItem.GetCount">
            <summary>
            Number of get operations performed by the server.
            </summary>
        </member>
        <member name="F:Enyim.Caching.Memcached.StatItem.SetCount">
            <summary>
            Number of set operations performed by the server.
            </summary>
        </member>
        <member name="F:Enyim.Caching.Memcached.StatItem.GetHits">
            <summary>
            Cache hit.
            </summary>
        </member>
        <member name="F:Enyim.Caching.Memcached.StatItem.GetMisses">
            <summary>
            Cache miss.
            </summary>
        </member>
        <member name="F:Enyim.Caching.Memcached.StatItem.UsedBytes">
            <summary>
            ?
            </summary>
        </member>
        <member name="F:Enyim.Caching.Memcached.StatItem.BytesRead">
            <summary>
            Number of bytes read from the server.
            </summary>
        </member>
        <member name="F:Enyim.Caching.Memcached.StatItem.BytesWritten">
            <summary>
            Number of bytes written to the server.
            </summary>
        </member>
        <member name="F:Enyim.Caching.Memcached.StatItem.MaxBytes">
            <summary>
            ?
            </summary>
        </member>
        <member name="T:Enyim.Caching.Memcached.Base64KeyTransformer">
            <summary>
            A key transformer which converts the item keys into Base64.
            </summary>
        </member>
        <member name="T:PHP.Library.Memcached.OptionsConstants">
            <summary>
            
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.OptionsConstants.Serializer">
            <summary>
            Specifies the serializer to use for serializing non-scalar values.
            The valid serializers are Memcached::SERIALIZER_PHP or Memcached::SERIALIZER_IGBINARY.
            The latter is supported only when memcached is configured with --enable-memcached-igbinary
            option and the igbinary extension is loaded.
            
            Type: integer, default: Memcached::SERIALIZER_PHP.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.OptionsConstants.PrefixKey">
            <summary>
            This can be used to create a "domain" for your item keys.
            The value specified here will be prefixed to each of the keys.
            It cannot be longer than 128 characters and will reduce the maximum available key size.
            The prefix is applied only to the item keys, not to the server keys.
            
            Type: string, default: "".
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.OptionsConstants.Compression">
            <summary>
            Enables or disables payload compression. When enabled, 
            item values longer than a certain threshold (currently 100 bytes)
            will be compressed during storage and decompressed during retrieval transparently.
            
            Type: boolean, default: TRUE.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.OptionsConstants.NoBlock">
            <summary>
            Enables or disables asynchronous I/O. This is the fastest transport available for storage functions.
            Type: boolean, default: FALSE.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.OptionsConstants.TcpNoDelay">
            <summary>
            Enables or disables the no-delay feature for connecting sockets (may be faster in some environments).
            Type: boolean, default: FALSE.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.OptionsConstants.Hash">
             <summary>
            Specifies the hashing algorithm used for the item keys.
            The valid values are supplied via Memcached::HASH_* constants.
            Each hash algorithm has its advantages and its disadvantages.
            Go with the default if you don't know or don't care.
            
             Type: integer, default: Memcached::HASH_DEFAULT
             </summary>
        </member>
        <member name="F:PHP.Library.Memcached.OptionsConstants.Distribution">
            <summary>
            Specifies the method of distributing item keys to the servers.
            Currently supported methods are modulo and consistent hashing.
            Consistent hashing delivers better distribution and allows servers
            to be added to the cluster with minimal cache losses.
            
            Type: integer, default: Memcached::DISTRIBUTION_MODULA.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.OptionsConstants.LibketamaCompatible">
            <summary>
            Enables or disables compatibility with libketama-like behavior.
            When enabled, the item key hashing algorithm is set to MD5 and distribution is set to be weighted consistent hashing distribution. This is useful because other libketama-based clients (Python, Ruby, etc.) with the same server configuration will be able to access the keys transparently.
            Note: It is highly recommended to enable this option if you want to use consistent hashing, and it may be enabled by default in future releases.
            Type: boolean, default: FALSE.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.OptionsConstants.BufferWrites">
            <summary>
            Enables or disables buffered I/O.
            Enabling buffered I/O causes storage commands to "buffer" instead of being sent.
            Any action that retrieves data causes this buffer to be sent to the remote connection.
            Quitting the connection or closing down the connection will also cause the buffered data to be pushed to the remote connection.
            Type: boolean, default: FALSE.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.OptionsConstants.BinaryProtocol">
            <summary>
            Enable the use of the binary protocol. Please note that you cannot toggle this option on an open connection.
            Type: boolean, default: FALSE.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.OptionsConstants.SocketSendSize">
            <summary>
            The maximum socket send buffer in bytes.
            Type: integer, default: varies by platform/kernel configuration.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.OptionsConstants.SocketRecvSize">
            <summary>
            The maximum socket receive buffer in bytes.
            Type: integer, default: varies by platform/kernel configuration.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.OptionsConstants.ConnectTimeout">
            <summary>
            In non-blocking mode this set the value of the timeout during socket connection, in milliseconds.
            Type: integer, default: 1000.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.OptionsConstants.RetryTimeout">
            <summary>
            The amount of time, in seconds, to wait until retrying a failed connection attempt.
            Type: integer, default: 0.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.OptionsConstants.SendTimeout">
            <summary>
            Socket sending timeout, in microseconds. In cases where you cannot use non-blocking I/O this will allow you to still have timeouts on the sending of data.
            Type: integer, default: 0.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.OptionsConstants.RecvTimeout">
            <summary>
            Socket reading timeout, in microseconds. In cases where you cannot use non-blocking I/O this will allow you to still have timeouts on the reading of data.
            Type: integer, default: 0.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.OptionsConstants.PollTimeout">
            <summary>
            Timeout for connection polling, in milliseconds.
            Type: integer, default: 1000.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.OptionsConstants.CacheLookups">
            <summary>
            Enables or disables caching of DNS lookups.
            Type: boolean, default: FALSE.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.OptionsConstants.ServerFailureLimit">
            <summary>
            Specifies the failure limit for server connection attempts. The server will be removed after this many continuous connection failures.
            Type: integer, default: 0.
            </summary>
        </member>
        <member name="T:PHP.Library.Memcached.GetConstants">
            <summary>
            
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.GetConstants.PreserveOrder">
            <summary>
            A flag for Memcached::getMulti() and Memcached::getMultiByKey() to ensure that
            the keys are returned in the same order as they were requested in.
            Non-existing keys get a default value of NULL.
            </summary>
        </member>
        <member name="T:PHP.Library.Memcached.DistributionConstants">
            <summary>
            
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.DistributionConstants.ModulA">
            <summary>
            Modulo-based key distribution algorithm.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.DistributionConstants.Consistent">
            <summary>
            Consistent hashing key distribution algorithm (based on libketama).
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.DistributionConstants.Count">
            <summary>
            The last index in the enum - distribution constants count. For internal use only.
            </summary>
        </member>
        <member name="T:PHP.Library.Memcached.SerializerConstants">
            <summary>
            
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.SerializerConstants.Php">
            <summary>
            The default PHP serializer.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.SerializerConstants.IgBinary">
            <summary>
            The » igbinary serializer. Instead of textual representation it stores PHP data structures in a compact binary form, resulting in space and time gains.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.SerializerConstants.JSON">
            <summary>
            The JSON serializer. Requires PHP 5.2.10+.
            </summary>
        </member>
        <member name="T:PHP.Library.Memcached.HashConstants">
            <summary>
            
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.HashConstants.Default">
            <summary>
            The default (Jenkins one-at-a-time) item key hashing algorithm.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.HashConstants.MD5">
            <summary>
            MD5 item key hashing algorithm.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.HashConstants.CRC">
            <summary>
            CRC item key hashing algorithm.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.HashConstants.FNV1_64">
            <summary>
            FNV1_64 item key hashing algorithm.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.HashConstants.FNV1A_64">
            <summary>
            FNV1_64A item key hashing algorithm.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.HashConstants.FNV1_32">
            <summary>
            FNV1_32 item key hashing algorithm.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.HashConstants.FNV1A_32">
            <summary>
            FNV1_32A item key hashing algorithm.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.HashConstants.HSIEH">
            <summary>
            Hsieh item key hashing algorithm.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.HashConstants.MURMUR">
            <summary>
            Murmur item key hashing algorithm.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.HashConstants.Count">
            <summary>
            The last index in the enum - hash constants count. For internal use only.
            </summary>
        </member>
        <member name="T:PHP.Library.Memcached.ResConstants">
            <summary>
            
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.ResConstants.Success">
            <summary>
            The operation was successful.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.ResConstants.Failure">
            <summary>
            The operation failed in some fashion.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.ResConstants.HostLookupFailure">
            <summary>
            DNS lookup failed.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.ResConstants.UnknownReadFalure">
            <summary>
            Failed to read network data.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.ResConstants.ProtocolError">
            <summary>
            Bad command in memcached protocol.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.ResConstants.ClientError">
            <summary>
            Error on the client side.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.ResConstants.ServerError">
            <summary>
            Error on the server side.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.ResConstants.WriteFailure">
            <summary>
            Failed to write network data.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.ResConstants.DataExists">
            <summary>
            Failed to do compare-and-swap: item you are trying to store has been modified since you last fetched it.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.ResConstants.NotStored">
            <summary>
            Item was not stored: but not because of an error. This normally means that either the condition for an "add" or a "replace" command wasn't met, or that the item is in a delete queue.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.ResConstants.NotFound">
            <summary>
            Item with this key was not found (with "get" operation or "cas" operations).
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.ResConstants.PartialRead">
            <summary>
            Partial network data read error.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.ResConstants.SomeErrors">
            <summary>
            Some errors occurred during multi-get.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.ResConstants.NoServers">
            <summary>
            Server list is empty.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.ResConstants.End">
            <summary>
            End of result set.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.ResConstants.ErrNo">
            <summary>
            System error.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.ResConstants.Buffered">
            <summary>
            The operation was buffered.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.ResConstants.Timeout">
            <summary>
            The operation timed out.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.ResConstants.BadKeyProvided">
            <summary>
            Bad key.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.ResConstants.ConnectionSocketCreateFailure">
            <summary>
            Failed to create network socket.
            </summary>
        </member>
        <member name="F:PHP.Library.Memcached.ResConstants.PayloadFailure">
            <summary>
            Payload failure: could not compress/decompress or serialize/unserialize the value.
            </summary>
        </member>
        <member name="T:Enyim.Caching.Memcached.PhpTranscoder">
            <summary>
            Default <see cref="T:ITranscoder"/> implementation. Primitive types are manually serialized, the rest is serialized using <see cref="T:BinarySerializer"/>.
            </summary>
        </member>
        <member name="F:Enyim.Caching.Memcached.PhpTranscoder.CompressThreshold">
            <summary>
            Data below this size are not compressed.
            </summary>
        </member>
        <member name="M:Enyim.Caching.Memcached.PhpTranscoder.AddCompressionEventually(Enyim.Caching.Memcached.CacheItem,System.Boolean)">
            <summary>
            Add compression flag if the data meet the condition
            </summary>
            <param name="item"></param>
            <param name="compressionFlagAllowed">Is the compression in allowed.</param>
        </member>
        <member name="M:Enyim.Caching.Memcached.PhpTranscoder.DoSerialize(System.Object,System.Boolean)">
            <summary>
            Serialize value.
            </summary>
            <param name="value"></param>
            <param name="compressionFlagAllowed"></param>
            <returns></returns>
        </member>
        <member name="M:Enyim.Caching.Memcached.PhpTranscoder.DoDeserialize(Enyim.Caching.Memcached.CacheItem)">
            <summary>
            Deserialize value.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="P:Enyim.Caching.Memcached.PhpTranscoder.Serializer">
            <summary>
            Method used to serialize the values.
            </summary>
        </member>
        <member name="T:Enyim.Caching.Memcached.CacheItemFlags">
            <summary>
            Common CacheItem flag values.
            </summary>
        </member>
        <member name="F:Enyim.Caching.Memcached.CacheItemFlags.TypeString">
            <summary>
            String.
            </summary>
        </member>
        <member name="F:Enyim.Caching.Memcached.CacheItemFlags.TypeLong">
            <summary>
            Long.
            </summary>
        </member>
        <member name="F:Enyim.Caching.Memcached.CacheItemFlags.TypeDouble">
            <summary>
            Double.
            </summary>
        </member>
        <member name="F:Enyim.Caching.Memcached.CacheItemFlags.TypeBool">
            <summary>
            Bool.
            </summary>
        </member>
        <member name="F:Enyim.Caching.Memcached.CacheItemFlags.TypeSerialized">
            <summary>
            Serialized.
            </summary>
        </member>
        <member name="F:Enyim.Caching.Memcached.CacheItemFlags.TypeJSON">
            <summary>
            JSON.
            </summary>
        </member>
        <member name="F:Enyim.Caching.Memcached.CacheItemFlags.TypeMask">
            <summary>
            Mask of all types.
            </summary>
        </member>
        <member name="F:Enyim.Caching.Memcached.CacheItemFlags.Compression">
            <summary>
            Compression flag.
            </summary>
        </member>
        <member name="T:Enyim.Caching.Memcached.CacheItem">
            <summary>
            Represents an object either being retrieved from the cache
            or being sent to the cache.
            </summary>
        </member>
        <member name="M:Enyim.Caching.Memcached.CacheItem.#ctor(System.UInt16,System.ArraySegment{System.Byte})">
            <summary>
            Initializes a new instance of <see cref="T:CacheItem"/>.
            </summary>
            <param name="flags">Custom item data.</param>
            <param name="data">The serialized item.</param>
        </member>
        <member name="P:Enyim.Caching.Memcached.CacheItem.Data">
            <summary>
            The data representing the item being stored/retrieved.
            </summary>
        </member>
        <member name="P:Enyim.Caching.Memcached.CacheItem.Flags">
            <summary>
            Flags set for this instance.
            </summary>
        </member>
        <member name="M:Enyim.Caching.Memcached.Operations.Text.TextSocketHelper.ReadResponse(Enyim.Caching.Memcached.PooledSocket)">
            <summary>
            Reads the response of the server.
            </summary>
            <returns>The data sent by the memcached server.</returns>
            <exception cref="T:System.InvalidOperationException">The server did not sent a response or an empty line was returned.</exception>
            <exception cref="T:Enyim.Caching.Memcached.MemcachedException">The server did not specified any reason just returned the string ERROR. - or - The server returned a SERVER_ERROR, in this case the Message of the exception is the message returned by the server.</exception>
            <exception cref="T:Enyim.Caching.Memcached.MemcachedClientException">The server did not recognize the request sent by the client. The Message of the exception is the message returned by the server.</exception>
        </member>
        <member name="M:Enyim.Caching.Memcached.Operations.Text.TextSocketHelper.ReadLine(Enyim.Caching.Memcached.PooledSocket)">
            <summary>
            Reads a line from the socket. A line is terninated by \r\n.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Enyim.Caching.Memcached.Operations.Text.TextSocketHelper.SendCommand(Enyim.Caching.Memcached.PooledSocket,System.String)">
            <summary>
            Sends the command to the server. The trailing \r\n is automatically appended.
            </summary>
            <param name="socket"></param>
            <param name="value">The command to be sent to the server.</param>
        </member>
        <member name="M:Enyim.Caching.Memcached.Operations.Text.TextSocketHelper.GetCommandBuffer(System.String)">
            <summary>
            Gets the bytes representing the specified command. returned buffer can be used to streamline multiple writes into one Write on the Socket
            using the <see cref="M:Enyim.Caching.Memcached.PooledSocket.Write(IList&lt;ArraySegment&lt;byte&gt;&gt;)"/>
            </summary>
            <param name="value">The command to be converted.</param>
            <returns>The buffer containing the bytes representing the command. The returned buffer will be terminated with 13, 10 (\r\n)</returns>
            <remarks>The Nagle algorithm is disabled on the socket to speed things up, so it's recommended to convert a command into a buffer
            and use the <see cref="M:Enyim.Caching.Memcached.PooledSocket.Write(IList&lt;ArraySegment&lt;byte&gt;&gt;)"/> to send the command and the additional buffers in one transaction.</remarks>
        </member>
        <member name="T:Enyim.Caching.Memcached.ISaslAuthenticationProvider">
            <summary>
            Provides the base interface for Memcached SASL authentication.
            </summary>
        </member>
        <member name="M:Enyim.Caching.Memcached.ISaslAuthenticationProvider.Initialize(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Init.
            </summary>
            <param name="parameters"></param>
        </member>
        <member name="M:Enyim.Caching.Memcached.ISaslAuthenticationProvider.Authenticate">
            <summary>
            Authenticate.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Enyim.Caching.Memcached.ISaslAuthenticationProvider.Continue(System.Byte[])">
            <summary>
            Continue authentication.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="P:Enyim.Caching.Memcached.ISaslAuthenticationProvider.Type">
            <summary>
            Type.
            </summary>
        </member>
        <member name="M:Enyim.Hashes.Hash_MD5.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:Enyim.Hashes.Hash_MD5.Initialize">
            <summary>
            Initializes an instance.
            </summary>
        </member>
        <member name="M:Enyim.Hashes.Hash_MD5.HashFinal">
            <summary>
            Returns the computed <see cref="T:OneAtATime" /> hash value after all data has been written to the object.
            </summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="T:Enyim.Reflection.FastActivator">
            <summary>
            <para>Implements a very fast object factory for dynamic object creation. Dynamically generates a factory class which will use the new() constructor of the requested type.</para>
            <para>Much faster than using Activator at the price of the first invocation being significantly slower than subsequent calls.</para>
            </summary>
        </member>
        <member name="M:Enyim.Reflection.FastActivator.CreateInstance(System.Type)">
            <summary>
            Creates an instance of the specified type using a generated factory to avoid using Reflection.
            </summary>
            <param name="type">The type to be created</param>
            <returns>The newly created instance.</returns>
        </member>
        <member name="M:Enyim.Reflection.FastActivator.CreateInstance(System.Type,System.Type[],System.Object[])">
            <summary>
            Creates an instance of the specified type using a generated factory to avoid using Reflection. It will use the constructor which has the specified type of arguments.
            </summary>
            <param name="type">The type to be created.</param>
            <param name="ctor">The types of the contructor parameters.</param>
            <param name="args">The arguments used to initialize the new instance.</param>
            <returns>The newly created instance.</returns>
        </member>
        <member name="M:Enyim.Reflection.FastActivator.CreateInstance``1">
            <summary>
            Creates an instance of the specified type using a generated factory to avoid using Reflection.
            </summary>
            <typeparam name="T">The type to be created.</typeparam>
            <returns>The newly created instance.</returns>
        </member>
        <member name="M:Enyim.Reflection.FastActivator.CreateInstance``1(System.Type[],System.Object[])">
            <summary>
            Creates an instance of the specified type using a generated factory to avoid using Reflection. It will use the constructor which has the specified type of arguments.
            </summary>
            <typeparam name="T">The type to be created.</typeparam>
            <param name="ctor">The types of the contructor parameters.</param>
            <param name="args">The arguments used to initialize the new instance.</param>
            <returns>The newly created instance.</returns>
        </member>
        <member name="T:Enyim.Caching.Configuration.SocketPoolElement">
            <summary>
            Configures the socket pool settings for Memcached servers.
            </summary>
        </member>
        <member name="M:Enyim.Caching.Configuration.SocketPoolElement.PostDeserialize">
            <summary>
            Called after deserialization.
            </summary>
        </member>
        <member name="P:Enyim.Caching.Configuration.SocketPoolElement.MinPoolSize">
            <summary>
            Gets or sets a value indicating the minimum amount of sockets per server in the socket pool.
            </summary>
            <returns>The minimum amount of sockets per server in the socket pool.</returns>
        </member>
        <member name="P:Enyim.Caching.Configuration.SocketPoolElement.MaxPoolSize">
            <summary>
            Gets or sets a value indicating the maximum amount of sockets per server in the socket pool.
            </summary>
            <returns>The maximum amount of sockets per server in the socket pool.</returns>
        </member>
        <member name="P:Enyim.Caching.Configuration.SocketPoolElement.ConnectionTimeout">
            <summary>
            Gets or sets a value that specifies the amount of time after which the connection attempt will fail.
            </summary>
            <returns>The value of the connection timeout. The default is 10 seconds.</returns>
        </member>
        <member name="P:Enyim.Caching.Configuration.SocketPoolElement.ReceiveTimeout">
            <summary>
            Gets or sets a value that specifies the amount of time after which receiving data from the socket fails.
            </summary>
            <returns>The value of the receive timeout. The default is 10 seconds.</returns>
        </member>
        <member name="P:Enyim.Caching.Configuration.SocketPoolElement.DeadTimeout">
            <summary>
            Gets or sets a value that specifies the amount of time after which an unresponsive (dead) server will be checked if it is working.
            </summary>
            <returns>The value of the dead timeout. The default is 2 minutes.</returns>
        </member>
        <member name="T:Enyim.Caching.UIntEqualityComparer">
            <summary>
            A fast comparer for dictionaries indexed by UInt. Faster than using Comparer.Default
            </summary>
        </member>
        <member name="T:Enyim.Caching.Memcached.ServerStats">
            <summary>
            Represents the statistics of a Memcached node.
            </summary>
        </member>
        <member name="F:Enyim.Caching.Memcached.ServerStats.All">
            <summary>
            Defines a value which indicates that the statstics should be retrieved for all servers in the pool.
            </summary>
        </member>
        <member name="F:Enyim.Caching.Memcached.ServerStats.StatKeys">
            <summary>
            Server stat keys.
            </summary>
        </member>
        <member name="M:Enyim.Caching.Memcached.ServerStats.GetValue(Enyim.Caching.Memcached.NamedIPEndPoint,Enyim.Caching.Memcached.StatItem)">
            <summary>
            Gets a stat value for the specified server.
            </summary>
            <param name="server">The adress of the server. If <see cref="F:System.Net.IPAddress.Any"/> is specified it will return the sum of all server stat values.</param>
            <param name="item">The stat to be returned</param>
            <returns>The value of the specified stat item</returns>
        </member>
        <member name="M:Enyim.Caching.Memcached.ServerStats.GetVersion(Enyim.Caching.Memcached.NamedIPEndPoint)">
            <summary>
            Returns the server of memcached running on the specified server.
            </summary>
            <param name="server">The adress of the server</param>
            <returns>The version of memcached</returns>
        </member>
        <member name="M:Enyim.Caching.Memcached.ServerStats.GetUptime(Enyim.Caching.Memcached.NamedIPEndPoint)">
            <summary>
            Returns the uptime of the specific server.
            </summary>
            <param name="server">The adress of the server</param>
            <returns>A value indicating how long the server is running</returns>
        </member>
        <member name="M:Enyim.Caching.Memcached.ServerStats.GetRaw(Enyim.Caching.Memcached.NamedIPEndPoint,System.String)">
            <summary>
            Returns the stat value for a specific server. The value is not converted but returned as the server returned it.
            </summary>
            <param name="server">The adress of the server</param>
            <param name="key">The name of the stat value</param>
            <returns>The value of the stat item</returns>
        </member>
        <member name="M:Enyim.Caching.Memcached.ServerStats.GetRaw(Enyim.Caching.Memcached.NamedIPEndPoint,Enyim.Caching.Memcached.StatItem)">
            <summary>
            Returns the stat value for a specific server. The value is not converted but returned as the server returned it.
            </summary>
            <param name="server">The adress of the server</param>
            <param name="item">The stat value to be returned</param>
            <returns>The value of the stat item</returns>
        </member>
        <member name="T:Enyim.Caching.Configuration.InterfaceValidator">
            <summary>
            Configuration validator interface.
            </summary>
        </member>
        <member name="M:Enyim.Caching.Configuration.InterfaceValidator.#ctor(System.Type)">
            <summary>
            Throws if type is not an interface. Stores the type's interface.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Enyim.Caching.Configuration.InterfaceValidator.CanValidate(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Enyim.Caching.Configuration.InterfaceValidator.Validate(System.Object)">
            <summary>
            Validate value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:Enyim.Caching.Configuration.InterfaceValidatorAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Enyim.Caching.Configuration.InterfaceValidatorAttribute.#ctor(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
        </member>
        <member name="P:Enyim.Caching.Configuration.InterfaceValidatorAttribute.ValidatorInstance">
            <summary>
            
            </summary>
        </member>
        <member name="T:Enyim.Caching.Configuration.IAuthenticationConfiguration">
            <summary>
            Defines an interface for configuring the authentication paramaters the <see cref="T:MemcachedClient"/>.
            </summary>
        </member>
        <member name="P:Enyim.Caching.Configuration.IAuthenticationConfiguration.Type">
            <summary>
            Gets or sets the type of the <see cref="T:Enyim.Caching.Memcached.IAuthenticationProvider"/> which will be used authehticate the connections to the Memcached nodes.
            </summary>
        </member>
        <member name="P:Enyim.Caching.Configuration.IAuthenticationConfiguration.Parameters">
            <summary>
            Gets or sets the parameters passed to the authenticator instance.
            </summary>
        </member>
        <member name="T:Enyim.Caching.MemcachedClient">
            <summary>
            Memcached client.
            </summary>
        </member>
        <member name="F:Enyim.Caching.MemcachedClient.Infinite">
            <summary>
            Represents a value which indicates that an item should never expire.
            </summary>
        </member>
        <member name="M:Enyim.Caching.MemcachedClient.Finalize">
            <summary>
            Initializes a new MemcachedClient instance using the default configuration section (enyim/memcached).
            </summary>
        </member>
        <member name="M:Enyim.Caching.MemcachedClient.#ctor(Enyim.Caching.Memcached.IServerPool,Enyim.Caching.Memcached.ISaslAuthenticationProvider,Enyim.Caching.Memcached.MemcachedProtocol)">
            <summary>
            Initializes a new instance of the <see cref="T:MemcachedClient"/> using a custom server pool implementation.
            </summary>
            <param name="pool">The server pool this client should use</param>
            <param name="provider">The authentication provider this client should use. If null, the connections will not be authenticated.</param>
            <param name="protocol">Specifies which protocol the client should use to communicate with the servers.</param>
        </member>
        <member name="M:Enyim.Caching.MemcachedClient.Get(System.String,System.String,System.UInt64@)">
            <summary>
            Retrieves the specified item from the cache.
            </summary>
            <param name="serverKey"></param>
            <param name="key">The identifier for the item to retrieve.</param>
            <param name="cas"></param>
            <returns>The retrieved item, or <value>null</value> if the key was not found.</returns>
        </member>
        <member name="M:Enyim.Caching.MemcachedClient.Get``1(System.String,System.String,System.UInt64@)">
            <summary>
            Retrieves the specified item from the cache.
            </summary>
            <param name="serverKey"></param>
            <param name="key">The identifier for the item to retrieve.</param>
            <param name="cas"></param>
            <returns>The retrieved item, or <value>default(T)</value> if the key was not found.</returns>
        </member>
        <member name="M:Enyim.Caching.MemcachedClient.TryGet(System.String,System.String,System.Object@,System.UInt64@)">
            <summary>
            Tries to get an item from the cache.
            </summary>
            <param name="serverKey"></param>
            <param name="key">The identifier for the item to retrieve.</param>
            <param name="value">The retrieved item or null if not found.</param>
            <param name="cas"></param>
            <returns>The <value>true</value> if the item was successfully retrieved.</returns>
        </member>
        <member name="M:Enyim.Caching.MemcachedClient.Store(Enyim.Caching.Memcached.StoreMode,System.String,System.String,System.Object,System.UInt64)">
            <summary>
            Inserts an item into the cache with a cache key to reference its location.
            </summary>
            <param name="mode">Defines how the item is stored in the cache.</param>
            <param name="serverKey"></param>
            <param name="key">The key used to reference the item.</param>
            <param name="value">The object to be inserted into the cache.</param>
            <param name="cas"></param>
            <remarks>The item does not expire unless it is removed due memory pressure.</remarks>
            <returns>true if the item was successfully stored in the cache; false otherwise.</returns>
        </member>
        <member name="M:Enyim.Caching.MemcachedClient.Store(Enyim.Caching.Memcached.StoreMode,System.String,System.String,System.Object,System.UInt64,System.TimeSpan)">
            <summary>
            Inserts an item into the cache with a cache key to reference its location.
            </summary>
            <param name="mode">Defines how the item is stored in the cache.</param>
            <param name="serverKey"></param>
            <param name="key">The key used to reference the item.</param>
            <param name="value">The object to be inserted into the cache.</param>
            <param name="cas"></param>
            <param name="validFor">The interval after the item is invalidated in the cache.</param>
            <returns>true if the item was successfully stored in the cache; false otherwise.</returns>
        </member>
        <member name="M:Enyim.Caching.MemcachedClient.Store(Enyim.Caching.Memcached.StoreMode,System.String,System.String,System.Object,System.UInt64,System.DateTime)">
            <summary>
            Inserts an item into the cache with a cache key to reference its location.
            </summary>
            <param name="mode">Defines how the item is stored in the cache.</param>
            <param name="serverKey"></param>
            <param name="key">The key used to reference the item.</param>
            <param name="value">The object to be inserted into the cache.</param>
            <param name="cas"></param>
            <param name="expiresAt">The time when the item is invalidated in the cache.</param>
            <returns>true if the item was successfully stored in the cache; false otherwise.</returns>
        </member>
        <member name="M:Enyim.Caching.MemcachedClient.Store(Enyim.Caching.Memcached.StoreMode,System.String,System.String,System.Object,System.UInt64,System.UInt32)">
            <summary>
            Inserts an item into the cache with a cache key to reference its location.
            </summary>
            <param name="mode">Defines how the item is stored in the cache.</param>
            <param name="serverKey"></param>
            <param name="key">The key used to reference the item.</param>
            <param name="value">The object to be inserted into the cache.</param>
            <param name="cas"></param>
            <param name="expiration">The time when the item is invalidated in the cache.</param>
            <returns>true if the item was successfully stored in the cache; false otherwise.</returns>
        </member>
        <member name="M:Enyim.Caching.MemcachedClient.Increment(System.String,System.String,System.UInt64,System.UInt64)">
            <summary>
            Increments the value of the specified key by the given amount. The operation is atomic and happens on the server.
            </summary>
            <param name="serverKey"></param>
            <param name="key">The identifier for the item to increment.</param>
            <param name="defaultValue">The value which will be stored by the server if the specified item was not found.</param>
            <param name="delta">The amount by which the client wants to increase the item.</param>
            <returns>The new value of the item or defaultValue if the key was not found.</returns>
            <remarks>If the client uses the Text protocol, the item must be inserted into the cache before it can be changed. It must be inserted as a <see cref="T:System.String"/>. Moreover the Text protocol only works with <see cref="T:System.UInt32"/> values, so return value -1 always indicates that the item was not found.</remarks>
        </member>
        <member name="M:Enyim.Caching.MemcachedClient.Decrement(System.String,System.String,System.UInt64,System.UInt64)">
            <summary>
            Decrements the value of the specified key by the given amount. The operation is atomic and happens on the server.
            </summary>
            <param name="serverKey"></param>
            <param name="key">The identifier for the item to decrement.</param>
            <param name="defaultValue">The value which will be stored by the server if the specified item was not found.</param>
            <param name="delta">The amount by which the client wants to decrease the item.</param>
            <returns>The new value of the item or defaultValue if the key was not found.</returns>
            <remarks>If the client uses the Text protocol, the item must be inserted into the cache before it can be changed. It must be inserted as a <see cref="T:System.String"/>. Moreover the Text protocol only works with <see cref="T:System.UInt32"/> values, so return value -1 always indicates that the item was not found.</remarks>
        </member>
        <member name="M:Enyim.Caching.MemcachedClient.Append(System.String,System.String,System.ArraySegment{System.Byte})">
            <summary>
            Appends the data to the end of the specified item's data on the server.
            </summary>
            <param name="serverKey"></param>
            <param name="key">The key used to reference the item.</param>
            <param name="data">The data to be stored.</param>
            <returns>true if the data was successfully stored; false otherwise.</returns>
        </member>
        <member name="M:Enyim.Caching.MemcachedClient.Prepend(System.String,System.String,System.ArraySegment{System.Byte})">
            <summary>
            Inserts the data before the specified item's data on the server.
            </summary>
            <returns>true if the data was successfully stored; false otherwise.</returns>
        </member>
        <member name="M:Enyim.Caching.MemcachedClient.FlushAll">
            <summary>
            Removes all data from the cache. Note: this will invalidate all data on all servers in the pool.
            </summary>
        </member>
        <member name="M:Enyim.Caching.MemcachedClient.Stats">
            <summary>
            Returns statistics about the servers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Enyim.Caching.MemcachedClient.Remove(System.String,System.String)">
            <summary>
            Removes the specified item from the cache.
            </summary>
            <param name="serverKey"></param>
            <param name="key">The identifier for the item to delete.</param>
            <returns>true if the item was successfully removed from the cache; false otherwise.</returns>
        </member>
        <member name="M:Enyim.Caching.MemcachedClient.Get(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Retrieves multiple items from the cache.
            </summary>
            <param name="serverKey"></param>
            <param name="keys">The list of identifiers for the items to retrieve.</param>
            <returns>a Dictionary holding all items indexed by their key.</returns>
        </member>
        <member name="M:Enyim.Caching.MemcachedClient.GetExpiration(System.Nullable{System.TimeSpan},System.Nullable{System.DateTime})">
            <summary>
            
            </summary>
            <param name="validFor"></param>
            <param name="expiresAt"></param>
            <returns></returns>
        </member>
        <member name="M:Enyim.Caching.MemcachedClient.Dispose">
            <summary>
            Releases all resources allocated by this instance
            </summary>
            <remarks>Technically it's not really neccesary to call this, since the client does not create "really" disposable objects, so it's safe to assume that when 
            the AppPool shuts down all resources will be released correctly and no handles or such will remain in the memory.</remarks>
        </member>
        <member name="T:Enyim.Caching.Memcached.Distribution.SingleNodeLocator">
            <summary>
            This is a simple node locator with no computation overhead, always returns the first server from the list. Use only in single server deployments.
            </summary>
        </member>
        <member name="T:PHP.Library.Memcached.MemcachedLocalConfig">
            <summary>
            Script independent Memcached configuration.
            </summary>
        </member>
        <member name="M:PHP.Library.Memcached.MemcachedLocalConfig.DeepCopy">
            <summary>
            Creates a deep copy of the configuration record.
            </summary>
            <returns>The copy.</returns>
        </member>
        <member name="M:PHP.Library.Memcached.MemcachedLocalConfig.Parse(System.String,System.String,System.Xml.XmlNode)">
            <summary>
            Loads configuration from XML.
            </summary>
        </member>
        <member name="T:PHP.Library.Memcached.MemcachedGlobalConfig">
            <summary>
            Script dependent Memcached configuration.
            </summary>
        </member>
        <member name="M:PHP.Library.Memcached.MemcachedGlobalConfig.Parse(System.String,System.String,System.Xml.XmlNode)">
            <summary>
            Loads configuration from XML.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.Memcached.MemcachedGlobalConfig.DeepCopy">
            <summary>
            Creates a deep copy of the configuration record.
            </summary>
            <returns>The copy.</returns>
        </member>
        <member name="T:PHP.Library.Memcached.MemcachedConfiguration">
            <summary>
            Memcached extension configuration.
            </summary>
        </member>
        <member name="M:PHP.Library.Memcached.MemcachedConfiguration.GetSetRestore(PHP.Core.LocalConfiguration,System.String,System.Object,PHP.Library.IniAction)">
            <summary>
            Gets, sets, or restores a value of a legacy configuration option.
            </summary>
        </member>
        <member name="M:PHP.Library.Memcached.MemcachedConfiguration.LegacyOptionsToXml(System.Xml.XmlTextWriter,System.Collections.Hashtable,System.Boolean)">
            <summary>
            Writes MySql legacy options and their values to XML text stream.
            Skips options whose values are the same as default values of Phalanger.
            </summary>
            <param name="writer">XML writer.</param>
            <param name="options">A hashtable containing PHP names and option values. Consumed options are removed from the table.</param>
            <param name="writePhpNames">Whether to add "phpName" attribute to option nodes.</param>
        </member>
        <member name="M:PHP.Library.Memcached.MemcachedConfiguration.RegisterLegacyOptions">
            <summary>
            Registers legacy ini-options.
            </summary>
        </member>
        <member name="M:PHP.Library.Memcached.MemcachedConfiguration.GetLocal(PHP.Core.ScriptContext)">
            <summary>
            Gets local configuration associated with a specified script context.
            </summary>
            <param name="context">Script context.</param>
            <returns>Local library configuration.</returns>
        </member>
        <member name="P:PHP.Library.Memcached.MemcachedConfiguration.Local">
            <summary>
            Gets the library configuration associated with the current script context.
            </summary>
        </member>
        <member name="P:PHP.Library.Memcached.MemcachedConfiguration.DefaultLocal">
            <summary>
            Gets the default library configuration.
            </summary>
        </member>
        <member name="P:PHP.Library.Memcached.MemcachedConfiguration.Global">
            <summary>
            Gets the global library configuration.
            </summary>
        </member>
        <member name="T:Enyim.Caching.Memcached.StoreMode">
            <summary>
            Indicates the mode how the items are stored in Memcached.
            </summary>
        </member>
        <member name="F:Enyim.Caching.Memcached.StoreMode.Add">
            <summary>
            Store the data, but only if the server does not already hold data for a given key
            </summary>
        </member>
        <member name="F:Enyim.Caching.Memcached.StoreMode.Replace">
            <summary>
            Store the data, but only if the server does already hold data for a given key
            </summary>
        </member>
        <member name="F:Enyim.Caching.Memcached.StoreMode.Set">
            <summary>
            Store the data, overwrite if already exist
            </summary>
        </member>
        <member name="F:Enyim.Caching.Memcached.StoreCommand.Add">
            <summary>
            Store the data, but only if the server does not already hold data for a given key
            </summary>
        </member>
        <member name="F:Enyim.Caching.Memcached.StoreCommand.Replace">
            <summary>
            Store the data, but only if the server does already hold data for a given key
            </summary>
        </member>
        <member name="F:Enyim.Caching.Memcached.StoreCommand.Set">
            <summary>
            Store the data, overwrite if already exist
            </summary>
        </member>
        <member name="F:Enyim.Caching.Memcached.StoreCommand.Append">
            <summary>
            Appends the data to an existing key's data
            </summary>
        </member>
        <member name="F:Enyim.Caching.Memcached.StoreCommand.Prepend">
            <summary>
            Inserts the data before an existing key's data
            </summary>
        </member>
        <member name="F:Enyim.Caching.Memcached.StoreCommand.CheckAndSet">
            <summary>
            Stores the data only if it has not been updated by someone else. Uses a "transaction id" to check for modification.
            </summary>
        </member>
        <member name="T:Enyim.Caching.Memcached.Operations.Binary.BinaryProtocol">
            <summary>
            Memcached client.
            </summary>
        </member>
        <member name="F:Enyim.Caching.Memcached.Operations.Binary.BinaryProtocol.MaxKeyLength">
            <summary>
            Maximum key length in Text protocol.
            </summary>
        </member>
        <member name="M:Enyim.Caching.Memcached.Operations.Binary.BinaryProtocol.Dispose">
            <summary>
            Releases all resources allocated by this instance
            </summary>
            <remarks>Technically it's not really neccesary to call this, since the client does not create "really" disposable objects, so it's safe to assume that when 
            the AppPool shuts down all resources will be released correctly and no handles or such will remain in the memory.</remarks>
        </member>
        <member name="M:Enyim.Hashes.Hash_CRC32.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:Enyim.Hashes.Hash_CRC32.Initialize">
            <summary>
            Initializes an instance.
            </summary>
        </member>
        <member name="M:Enyim.Hashes.Hash_CRC32.HashFinal">
            <summary>
            Returns the computed <see cref="T:CRC32" /> hash value after all data has been written to the object.
            </summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="T:NorthScale.Store.MessageStreamListener">
            <summary>
            Listens on a streamingUri and processes the messages
            </summary>
        </member>
        <member name="M:NorthScale.Store.MessageStreamListener.Start">
            <summary>
            Starts processing the streaming URI
            </summary>
        </member>
        <member name="M:NorthScale.Store.MessageStreamListener.Stop">
            <summary>
            Stops processing
            </summary>
        </member>
        <member name="T:Enyim.Caching.Memcached.Operations.Binary.MultiGetOperation.MGetSession">
            <summary>
            Handles the MultiGet against a node
            </summary>
        </member>
        <member name="T:Enyim.Caching.Memcached.TigerHashKeyTransformer">
            <summary>
            A key transformer which converts the item keys into their Tiger hash.
            </summary>
        </member>
        <member name="M:Enyim.Caching.Memcached.TigerHashKeyTransformer.Transform(System.String)">
            <summary>
            Transform the key.
            </summary>
            <param name="key">The key to transform.</param>
            <returns>Transformed key.</returns>
        </member>
        <member name="T:Enyim.Caching.Memcached.SHA1KeyTransformer">
            <summary>
            A key transformer which converts the item keys into their SHA1 hash.
            </summary>
        </member>
        <member name="M:Enyim.Hashes.Hash_OneAtATime.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:Enyim.Hashes.Hash_OneAtATime.Initialize">
            <summary>
            Initializes an instance.
            </summary>
        </member>
        <member name="M:Enyim.Hashes.Hash_OneAtATime.HashFinal">
            <summary>
            Returns the computed <see cref="T:OneAtATime" /> hash value after all data has been written to the object.
            </summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="T:Enyim.Caching.Configuration.AuthenticationConfiguration">
            <summary>
            Authentication configuration.
            </summary>
        </member>
        <member name="T:Enyim.Hashes.TigerHash">
            <summary>
            Implements the Tiger hash. (http://www.cs.technion.ac.il/~biham/Reports/Tiger/)
            
            Ported (and cleaned&amp;sped up) from the Tiger.NET VB code. (http://www.hotpixel.net/software.html)
            </summary>
        </member>
        <member name="M:Enyim.Hashes.TigerHash.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TigerHash"/> class.
            </summary>
        </member>
        <member name="M:Enyim.Hashes.TigerHash.Initialize">
            <summary>
            Initializes an instance of <see cref="T:TigerHash"/>.
            </summary>
        </member>
        <member name="M:Enyim.Hashes.TigerHash.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>Routes data written to the object into the <see cref="T:TigerHash" /> hash algorithm for computing the hash.</summary>
            <param name="array">The input data. </param>
            <param name="ibStart">The offset into the byte array from which to begin using data. </param>
            <param name="cbSize">The number of bytes in the array to use as data. </param>
        </member>
        <member name="M:Enyim.Hashes.TigerHash.HashFinal">
            <summary>
            Returns the computed <see cref="T:TigerHash" /> hash value after all data has been written to the object.
            </summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="T:NorthScale.Store.NorthScalePool">
            <summary>
            Socket pool using the NorthScale server's dynamic node list
            </summary>
        </member>
        <member name="T:Enyim.Caching.Memcached.IServerPool">
            <summary>
            Provides custom server pool implementations
            </summary>
        </member>
        <member name="M:Enyim.Caching.Memcached.IServerPool.Acquire(System.String)">
            <summary>
            Acquire socket from pool.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Enyim.Caching.Memcached.IServerPool.GetServers">
            <summary>
            Get servers in pool.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Enyim.Caching.Memcached.IServerPool.Start">
            <summary>
            Start the pool.
            </summary>
        </member>
        <member name="P:Enyim.Caching.Memcached.IServerPool.Transcoder">
            <summary>
            Transcoder.
            </summary>
        </member>
        <member name="P:Enyim.Caching.Memcached.IServerPool.NodeLocator">
            <summary>
            Locator.
            </summary>
        </member>
        <member name="P:Enyim.Caching.Memcached.IServerPool.KeyTransformer">
            <summary>
            Key transformer.
            </summary>
        </member>
        <member name="P:Enyim.Caching.Memcached.IServerPool.PrefixKey">
            <summary>
            Prefix key.
            </summary>
        </member>
        <member name="P:Enyim.Caching.Memcached.IServerPool.ServersCount">
            <summary>
            Server count in the pool.
            </summary>
        </member>
        <member name="P:Enyim.Caching.Memcached.IServerPool.Authenticator">
            <summary>
            Authenticator.
            </summary>
        </member>
        <member name="T:Enyim.Caching.Memcached.Distribution.KetamaNodeLocator">
            <summary>
            Implements Ketama cosistent hashing, compatible with the "spymemcached" Java client
            </summary>
        </member>
        <member name="T:Enyim.Caching.Configuration.SocketPoolConfiguration">
            <summary>
            Socket pool configuration.
            </summary>
        </member>
        <member name="T:Enyim.Caching.Memcached.DefaultServerPool">
            <summary>
            Server pool.
            </summary>
        </member>
        <member name="F:Enyim.Caching.Memcached.DefaultServerPool.serverAccessLock">
            <summary>
            Used to synchronize read/write accesses on the server lists.
            </summary>
        </member>
        <member name="M:Enyim.Caching.Memcached.DefaultServerPool.#ctor(Enyim.Caching.Configuration.IMemcachedClientConfiguration,Enyim.Caching.Memcached.IMemcachedKeyTransformer,System.Type)">
            <summary>
            Initializes the server pool.
            </summary>
            <param name="configuration">Configuration.</param>
            <param name="keyTransformer">Key transformer.</param>
            <param name="nodeLocatorType">Locator.</param>
        </member>
        <member name="M:Enyim.Caching.Memcached.DefaultServerPool.Start">
            <summary>
            This will start the pool: initializes the nodelocator, warms up the socket pools, etc.
            </summary>
        </member>
        <member name="M:Enyim.Caching.Memcached.DefaultServerPool.AddServers(System.Collections.Generic.IEnumerable{Enyim.Caching.Memcached.NamedIPEndPoint})">
            <summary>
            Add new servers into the pool even if Start() was called already.
            </summary>
            <param name="servers">List of servers to add.</param>
        </member>
        <member name="M:Enyim.Caching.Memcached.DefaultServerPool.ReaddServers">
            <summary>
            Recreate all MemcachedNode items.
            </summary>
        </member>
        <member name="M:Enyim.Caching.Memcached.DefaultServerPool.callback_isAliveTimer(System.Object)">
            <summary>
            Checks if a dead node is working again.
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Enyim.Caching.Memcached.DefaultServerPool.MarkAsDead(Enyim.Caching.Memcached.IMemcachedNode)">
            <summary>
            Marks a node as dead (unusable)
             - moves the node to the  "dead list"
             - recreates the locator based on the new list of still functioning servers
            </summary>
            <param name="node"></param>
        </member>
        <member name="F:Enyim.Caching.Memcached.DefaultServerPool.Transcoder">
            <summary>
            Transcoder performs serialization and deserialization of objects.
            </summary>
        </member>
        <member name="M:Enyim.Caching.Memcached.DefaultServerPool.LocateNode(System.String)">
            <summary>
            Finds the <see cref="T:MemcachedNode"/> which is responsible for the specified item
            </summary>
            <param name="itemKey"></param>
            <returns></returns>
        </member>
        <member name="M:Enyim.Caching.Memcached.DefaultServerPool.Acquire(System.String)">
            <summary>
            Get item from pool.
            </summary>
            <param name="itemKey">Item key.</param>
            <returns>Socket or <b>null</b> reference if server according to the key is not found.</returns>
        </member>
        <member name="M:Enyim.Caching.Memcached.DefaultServerPool.SplitKeys(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Found nodes according to given keys.
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:Enyim.Caching.Memcached.DefaultServerPool.Finalize">
            <summary>
            Finalizes the pool.
            </summary>
        </member>
        <member name="P:Enyim.Caching.Memcached.DefaultServerPool.PrefixKey">
            <summary>
            Current prefix added to all the key parameters (used by protocol).
            </summary>
        </member>
        <member name="P:Enyim.Caching.Memcached.DefaultServerPool.KeyHash">
            <summary>
            Current key hashing function.
            </summary>
        </member>
        <member name="P:Enyim.Caching.Memcached.DefaultServerPool.DistributionMethod">
            <summary>
            Current distribution method.
            </summary>
        </member>
        <member name="P:Enyim.Caching.Memcached.DefaultServerPool.KeyTransformer">
            <summary>
            Returns the <see cref="t:IKeyTransformer"/> instance used by the pool
            </summary>
        </member>
        <member name="P:Enyim.Caching.Memcached.DefaultServerPool.NodeLocator">
            <summary>
            Get locator.
            </summary>
        </member>
        <member name="P:Enyim.Caching.Memcached.DefaultServerPool.NodeLocatorType">
            <summary>
            Get/set locator type.
            </summary>
        </member>
        <member name="P:Enyim.Caching.Memcached.DefaultServerPool.WorkingServers">
            <summary>
            Get collection of nodes.
            </summary>
        </member>
        <member name="P:Enyim.Caching.Memcached.DefaultServerPool.ServersCount">
            <summary>
            Servers count.
            </summary>
        </member>
        <member name="P:Enyim.Caching.Memcached.DefaultServerPool.Count">
            <summary>
            Servers count.
            </summary>
        </member>
        <member name="P:Enyim.Caching.Memcached.DefaultServerPool.Authenticator">
            <summary>
            Authenticator.
            </summary>
        </member>
        <member name="T:Enyim.Caching.Memcached.Distribution.RandomNodeLocator">
            <summary>
            This is a ketama-like consistent hashing based node locator. Used when no other <see cref="T:IMemcachedNodeLocator"/> is specified for the pool.
            </summary>
        </member>
        <member name="T:Enyim.Hashes.HashCodeCombiner">
            <summary>
            Combines multiple hash codes into one.
            </summary>
        </member>
        <member name="M:Enyim.Hashes.HashCodeCombiner.#ctor">
            <summary>
            Initialize the combiner with a default value.
            </summary>
        </member>
        <member name="M:Enyim.Hashes.HashCodeCombiner.#ctor(System.Int32)">
            <summary>
            Initialize the combiner.
            </summary>
            <param name="initialValue"></param>
        </member>
        <member name="M:Enyim.Hashes.HashCodeCombiner.Combine(System.Int32,System.Int32)">
            <summary>
            Combine two values.
            </summary>
            <param name="code1"></param>
            <param name="code2"></param>
            <returns></returns>
        </member>
        <member name="M:Enyim.Hashes.HashCodeCombiner.Add(System.Int32)">
            <summary>
            Combine current value with given value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Enyim.Hashes.HashCodeCombiner.Combine(System.Int32,System.Int32,System.Int32)">
            <summary>
            Combine three values.
            </summary>
            <param name="code1"></param>
            <param name="code2"></param>
            <param name="code3"></param>
            <returns></returns>
        </member>
        <member name="M:Enyim.Hashes.HashCodeCombiner.Combine(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Combine four values.
            </summary>
            <param name="code1"></param>
            <param name="code2"></param>
            <param name="code3"></param>
            <param name="code4"></param>
            <returns></returns>
        </member>
        <member name="P:Enyim.Hashes.HashCodeCombiner.CurrentHash">
            <summary>
            Current value.
            </summary>
        </member>
        <member name="T:Enyim.Caching.Configuration.ConfigurationHelper">
            <summary>
            Helper methods.
            </summary>
        </member>
        <member name="M:Enyim.Caching.Configuration.ConfigurationHelper.CheckForInterface(System.Type,System.Type)">
            <summary>
            Check if type is of given interface. Throws an exception if not.
            </summary>
            <param name="type"></param>
            <param name="interfaceType"></param>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">Type does not implement given interface.</exception>
        </member>
        <member name="T:Enyim.Caching.Configuration.AuthenticationElement">
            <summary>
            Configures the authentication settings for Memcached servers.
            </summary>
        </member>
        <member name="P:Enyim.Caching.Configuration.AuthenticationElement.Type">
            <summary>
            Gets or sets the type of the <see cref="T:Enyim.Caching.Memcached.IAuthenticationProvider"/> which will be used authehticate the connections to the Memcached nodes.
            </summary>
        </member>
        <member name="T:Enyim.Caching.Memcached.PlainTextAuthenticator">
            <summary>
            Implements the default plain text ("PLAIN") Memcached authentication. It expects "userName" and "password" parameters during initalization.
            </summary>
        </member>
        <member name="T:Enyim.Collections.InterlockedQueue`1">
            <summary>
            Implements a non-locking queue.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Enyim.Collections.InterlockedQueue`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:InterlockedQueue"/> class.
            </summary>
        </member>
        <member name="M:Enyim.Collections.InterlockedQueue`1.Dequeue(`0@)">
            <summary>
            Removes and returns the item at the beginning of the <see cref="T:InterlockedQueue"/>.
            </summary>
            <param name="value">The object that is removed from the beginning of the <see cref="T:InterlockedQueue"/>.</param>
            <returns><value>true</value> if an item was successfully dequeued; otherwise <value>false</value>.</returns>
        </member>
        <member name="M:Enyim.Collections.InterlockedQueue`1.Enqueue(`0)">
            <summary>
            Adds an object to the end of the <see cref="T:InterlockedQueue"/>.
            </summary>
            <param name="value">The item to be added to the <see cref="T:InterlockedQueue"/>. The value can be <value>null</value>.</param>
        </member>
        <member name="M:Enyim.Hashes.Hash_HSIEH.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:Enyim.Hashes.Hash_HSIEH.Initialize">
            <summary>
            Initializes an instance.
            </summary>
        </member>
        <member name="M:Enyim.Hashes.Hash_HSIEH.HashFinal">
            <summary>
            Returns the computed <see cref="T:OneAtATime" /> hash value after all data has been written to the object.
            </summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="T:PHP.Library.Memcached.MemcachedLibraryDescriptor">
            <summary>
            Describes the class library assembly content and configuration.
            </summary>
        </member>
        <member name="M:PHP.Library.Memcached.MemcachedLibraryDescriptor.Loaded(PHP.Core.PhpLibraryAttribute,PHP.Core.LibraryConfigStore)">
            <summary>
            Called by the Core after the library is loaded.
            </summary>
        </member>
        <member name="M:PHP.Library.Memcached.MemcachedLibraryDescriptor.ParseConfig(PHP.Core.ConfigContextBase,PHP.Core.PhpConfigurationContext,System.Xml.XmlNode)">
            <summary>
            Parses a configuration section belonging to the Memcached library. 
            </summary>
            <param name="result">A configuration context.</param>
            <param name="context">The context of the configuration created by Phalanger Core.</param>
            <param name="section">A XML node containing the configuration or its part.</param>
            <returns>Updated configuration context.</returns>
        </member>
        <member name="M:PHP.Library.Memcached.MemcachedLibraryDescriptor.CreateConfigContext">
            <summary>
            Creates empty library configuration context.
            </summary>
            <returns>An initialized configuration context. Should not be a <B>null</B> reference.</returns>
        </member>
        <member name="P:PHP.Library.Memcached.MemcachedLibraryDescriptor.Singleton">
            <summary>
            Stores one and only instance of the class that is created when the assembly is loaded.
            </summary>
        </member>
        <member name="T:NorthScale.Store.Configuration.UriElementCollection">
            <summary>
            Represents a collection of <see cref="T:EndPointElement"/> instances. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:NorthScale.Store.Configuration.UriElementCollection.CreateNewElement">
            <summary>
            Creates a new <see cref="T:ConfigurationElement"/>.
            </summary>
            <returns>A new <see cref="T:ConfigurationElement"/>.</returns>
        </member>
        <member name="M:NorthScale.Store.Configuration.UriElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <param name="element">The <see cref="T:ConfigurationElement"/> to return the key for. </param>
            <returns>An <see cref="T:Object"/> that acts as the key for the specified <see cref="T:ConfigurationElement"/>.</returns>
        </member>
        <member name="M:NorthScale.Store.Configuration.UriElementCollection.ToUriCollection">
            <summary>
            Helper method; converts the collection into an <see cref="T:IPEndPoint"/> collection for the interface implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Enyim.Caching.Memcached.Operations.Binary.BinaryResponse.StatusCodeResult(Enyim.Caching.Memcached.Operations.Binary.ResponseStatus)">
            <summary>
            Convert binary status code into PHP memcached result.
            </summary>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="T:Enyim.Caching.Memcached.MemcachedNode">
            <summary>
            Represents a Memcached node in the pool.
            </summary>
        </member>
        <member name="M:Enyim.Caching.Memcached.MemcachedNode.#ctor(Enyim.Caching.Memcached.NamedIPEndPoint,Enyim.Caching.Configuration.ISocketPoolConfiguration,Enyim.Caching.Memcached.IAuthenticator)">
            <summary>
            Initialize new node.
            </summary>
            <param name="endpoint"></param>
            <param name="socketPoolConfig"></param>
            <param name="authenticator"></param>
        </member>
        <member name="M:Enyim.Caching.Memcached.MemcachedNode.Ping">
            <summary>
            Gets a value indicating whether the server is working or not.
            
            If the server is not working, and the "being dead" timeout has been expired it will reinitialize itself.
            </summary>
            <remarks>It's possible that the server is still not up &amp; running so the next call to <see cref="M:Acquire"/> could mark the instance as dead again.</remarks>
            <returns></returns>
        </member>
        <member name="M:Enyim.Caching.Memcached.MemcachedNode.Acquire">
            <summary>
            Acquires a new item from the pool
            </summary>
            <returns>An <see cref="T:PooledSocket"/> instance which is connected to the memcached server, or <value>null</value> if the pool is dead.</returns>
        </member>
        <member name="M:Enyim.Caching.Memcached.MemcachedNode.Finalize">
            <summary>
            Finalize the node.
            </summary>
        </member>
        <member name="M:Enyim.Caching.Memcached.MemcachedNode.Dispose">
            <summary>
            Releases all resources allocated by this instance
            </summary>
        </member>
        <member name="P:Enyim.Caching.Memcached.MemcachedNode.EndPoint">
            <summary>
            Gets the <see cref="T:NamedIPEndPoint"/> of this instance
            </summary>
        </member>
        <member name="P:Enyim.Caching.Memcached.MemcachedNode.IsAlive">
            <summary>
            <para>Gets a value indicating whether the server is working or not. Returns a <b>cached</b> state.</para>
            <para>To get real-time information and update the cached state, use the <see cref="M:Ping"/> method.</para>
            </summary>
            <remarks>Used by the <see cref="T:ServerPool"/> to quickly check if the server's state is valid.</remarks>
        </member>
        <member name="F:Enyim.Caching.Memcached.MemcachedNode.InternalPoolImpl.freeItems">
            <summary>
            A list of already connected but free to use sockets
            </summary>
        </member>
        <member name="M:Enyim.Caching.Memcached.MemcachedNode.InternalPoolImpl.Acquire">
            <summary>
            Acquires a new item from the pool
            </summary>
            <returns>An <see cref="T:PooledSocket"/> instance which is connected to the memcached server, or <value>null</value> if the pool is dead.</returns>
        </member>
        <member name="M:Enyim.Caching.Memcached.MemcachedNode.InternalPoolImpl.ReleaseSocket(Enyim.Caching.Memcached.PooledSocket)">
            <summary>
            Releases an item back into the pool
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:Enyim.Caching.Memcached.MemcachedNode.InternalPoolImpl.Dispose">
            <summary>
            Releases all resources allocated by this instance
            </summary>
        </member>
        <member name="T:Enyim.Caching.Memcached.MemcachedProtocol">
            <summary>
            memcached protocols.
            </summary>
        </member>
        <member name="F:Enyim.Caching.Memcached.MemcachedProtocol.Binary">
            <summary>
            Binary protocol.
            </summary>
        </member>
        <member name="F:Enyim.Caching.Memcached.MemcachedProtocol.Text">
            <summary>
            Text protocol.
            </summary>
        </member>
        <member name="T:Enyim.Caching.Memcached.CommandNotSupportedException">
            <summary>
            The exception that is thrown when a command is not supported by the Memcached server.
            </summary>
        </member>
        <member name="M:Enyim.Caching.Memcached.CommandNotSupportedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommandNotSupportedException"/> class.
            </summary>
        </member>
        <member name="M:Enyim.Caching.Memcached.CommandNotSupportedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandNotSupportedException"/> class with a specified error message.
            </summary>
        </member>
        <member name="M:Enyim.Caching.Memcached.CommandNotSupportedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandNotSupportedException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
        </member>
        <member name="M:Enyim.Caching.Memcached.CommandNotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandNotSupportedException"/> class with serialized data.
            </summary>
        </member>
    </members>
</doc>
